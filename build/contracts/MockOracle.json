{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "CancelOracleRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "specId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "callbackAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "callbackFunctionId",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cancelExpiration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dataVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "OracleRequest",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXPIRY_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_payment",
          "type": "uint256"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_expiration",
          "type": "uint256"
        }
      ],
      "name": "cancelOracleRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "fulfillOracleRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainlinkToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_payment",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_specId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_callbackAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_callbackFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dataVersion",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "oracleRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "13": "/Users/patrick/.brownie/packages/alphachainio/chainlink-contracts@1.1.2/contracts/src/v0.6/vendor/SafeMath.sol",
    "16": "contracts/test_contracts/mocks/MockOracle.sol",
    "2": "/Users/patrick/.brownie/packages/alphachainio/chainlink-contracts@1.1.2/contracts/src/v0.6/LinkTokenReceiver.sol",
    "6": "/Users/patrick/.brownie/packages/alphachainio/chainlink-contracts@1.1.2/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol",
    "8": "/Users/patrick/.brownie/packages/alphachainio/chainlink-contracts@1.1.2/contracts/src/v0.6/interfaces/LinkTokenInterface.sol"
  },
  "ast": {
    "absolutePath": "contracts/test_contracts/mocks/MockOracle.sol",
    "exportedSymbols": {
      "MockOracle": [
        498
      ]
    },
    "id": 499,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 202,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:16"
      },
      {
        "absolutePath": "/Users/patrick/.brownie/packages/alphachainio/chainlink-contracts@1.1.2/contracts/src/v0.6/LinkTokenReceiver.sol",
        "file": "@chainlink/contracts/src/v0.6/LinkTokenReceiver.sol",
        "id": 203,
        "nodeType": "ImportDirective",
        "scope": 499,
        "sourceUnit": 1320,
        "src": "57:61:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/patrick/.brownie/packages/alphachainio/chainlink-contracts@1.1.2/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol",
        "file": "@chainlink/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol",
        "id": 204,
        "nodeType": "ImportDirective",
        "scope": 499,
        "sourceUnit": 1353,
        "src": "119:80:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/patrick/.brownie/packages/alphachainio/chainlink-contracts@1.1.2/contracts/src/v0.6/interfaces/LinkTokenInterface.sol",
        "file": "@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol",
        "id": 205,
        "nodeType": "ImportDirective",
        "scope": 499,
        "sourceUnit": 1448,
        "src": "200:73:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/patrick/.brownie/packages/alphachainio/chainlink-contracts@1.1.2/contracts/src/v0.6/vendor/SafeMath.sol",
        "file": "@chainlink/contracts/src/v0.6/vendor/SafeMath.sol",
        "id": 206,
        "nodeType": "ImportDirective",
        "scope": 499,
        "sourceUnit": 1587,
        "src": "274:59:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 208,
              "name": "ChainlinkRequestInterface",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1352,
              "src": "495:25:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ChainlinkRequestInterface_$1352",
                "typeString": "contract ChainlinkRequestInterface"
              }
            },
            "id": 209,
            "nodeType": "InheritanceSpecifier",
            "src": "495:25:16"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 210,
              "name": "LinkTokenReceiver",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1319,
              "src": "522:17:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_LinkTokenReceiver_$1319",
                "typeString": "contract LinkTokenReceiver"
              }
            },
            "id": 211,
            "nodeType": "InheritanceSpecifier",
            "src": "522:17:16"
          }
        ],
        "contractDependencies": [
          1319,
          1352
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 207,
          "nodeType": "StructuredDocumentation",
          "src": "335:136:16",
          "text": " @title The Chainlink Mock Oracle contract\n @notice Chainlink smart contract developers can use this to test their contracts"
        },
        "fullyImplemented": true,
        "id": 498,
        "linearizedBaseContracts": [
          498,
          1319,
          1352
        ],
        "name": "MockOracle",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 214,
            "libraryName": {
              "contractScope": null,
              "id": 212,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1586,
              "src": "550:8:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$1586",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "544:27:16",
            "typeName": {
              "id": 213,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "563:7:16",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": true,
            "functionSelector": "4b602282",
            "id": 217,
            "mutability": "constant",
            "name": "EXPIRY_TIME",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 498,
            "src": "575:47:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 215,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "575:7:16",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "35",
              "id": 216,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "613:9:16",
              "subdenomination": "minutes",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_300_by_1",
                "typeString": "int_const 300"
              },
              "value": "5"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 220,
            "mutability": "constant",
            "name": "MINIMUM_CONSUMER_GAS_LIMIT",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 498,
            "src": "626:60:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 218,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "626:7:16",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "343030303030",
              "id": 219,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "680:6:16",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_400000_by_1",
                "typeString": "int_const 400000"
              },
              "value": "400000"
            },
            "visibility": "private"
          },
          {
            "canonicalName": "MockOracle.Request",
            "id": 225,
            "members": [
              {
                "constant": false,
                "id": 222,
                "mutability": "mutable",
                "name": "callbackAddr",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 225,
                "src": "716:20:16",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 221,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "716:7:16",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 224,
                "mutability": "mutable",
                "name": "callbackFunctionId",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 225,
                "src": "744:25:16",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes4",
                  "typeString": "bytes4"
                },
                "typeName": {
                  "id": 223,
                  "name": "bytes4",
                  "nodeType": "ElementaryTypeName",
                  "src": "744:6:16",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "Request",
            "nodeType": "StructDefinition",
            "scope": 498,
            "src": "693:81:16",
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 227,
            "mutability": "mutable",
            "name": "LinkToken",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 498,
            "src": "778:37:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_LinkTokenInterface_$1447",
              "typeString": "contract LinkTokenInterface"
            },
            "typeName": {
              "contractScope": null,
              "id": 226,
              "name": "LinkTokenInterface",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1447,
              "src": "778:18:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_LinkTokenInterface_$1447",
                "typeString": "contract LinkTokenInterface"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 231,
            "mutability": "mutable",
            "name": "commitments",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 498,
            "src": "819:47:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$225_storage_$",
              "typeString": "mapping(bytes32 => struct MockOracle.Request)"
            },
            "typeName": {
              "id": 230,
              "keyType": {
                "id": 228,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "827:7:16",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "819:27:16",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$225_storage_$",
                "typeString": "mapping(bytes32 => struct MockOracle.Request)"
              },
              "valueType": {
                "contractScope": null,
                "id": 229,
                "name": "Request",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 225,
                "src": "838:7:16",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Request_$225_storage_ptr",
                  "typeString": "struct MockOracle.Request"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 251,
            "name": "OracleRequest",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 250,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 233,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "specId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 251,
                  "src": "896:22:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 232,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "896:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 235,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "requester",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 251,
                  "src": "924:17:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 234,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "924:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 237,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 251,
                  "src": "947:17:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 236,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "947:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 239,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "payment",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 251,
                  "src": "970:15:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 238,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "970:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 241,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "callbackAddr",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 251,
                  "src": "991:20:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 240,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "991:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 243,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "callbackFunctionId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 251,
                  "src": "1017:25:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 242,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1017:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 245,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "cancelExpiration",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 251,
                  "src": "1048:24:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 244,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1048:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 247,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "dataVersion",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 251,
                  "src": "1078:19:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 246,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1078:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 249,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 251,
                  "src": "1103:10:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 248,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1103:5:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "890:227:16"
            },
            "src": "871:247:16"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 255,
            "name": "CancelOracleRequest",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 254,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 253,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 255,
                  "src": "1153:25:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 252,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1153:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1147:35:16"
            },
            "src": "1122:61:16"
          },
          {
            "body": {
              "id": 267,
              "nodeType": "Block",
              "src": "1415:97:16",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 265,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 261,
                      "name": "LinkToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 227,
                      "src": "1421:9:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_LinkTokenInterface_$1447",
                        "typeString": "contract LinkTokenInterface"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 263,
                          "name": "_link",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 258,
                          "src": "1452:5:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 262,
                        "name": "LinkTokenInterface",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1447,
                        "src": "1433:18:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LinkTokenInterface_$1447_$",
                          "typeString": "type(contract LinkTokenInterface)"
                        }
                      },
                      "id": 264,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1433:25:16",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_LinkTokenInterface_$1447",
                        "typeString": "contract LinkTokenInterface"
                      }
                    },
                    "src": "1421:37:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_LinkTokenInterface_$1447",
                      "typeString": "contract LinkTokenInterface"
                    }
                  },
                  "id": 266,
                  "nodeType": "ExpressionStatement",
                  "src": "1421:37:16"
                }
              ]
            },
            "documentation": {
              "id": 256,
              "nodeType": "StructuredDocumentation",
              "src": "1187:185:16",
              "text": " @notice Deploy with the address of the LINK token\n @dev Sets the LinkToken address for the imported LinkTokenInterface\n @param _link The address of the LINK token"
            },
            "id": 268,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 259,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 258,
                  "mutability": "mutable",
                  "name": "_link",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 268,
                  "src": "1387:13:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 257,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1387:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1386:15:16"
            },
            "returnParameters": {
              "id": 260,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1415:0:16"
            },
            "scope": 498,
            "src": "1375:137:16",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1340
            ],
            "body": {
              "id": 345,
              "nodeType": "Block",
              "src": "2484:551:16",
              "statements": [
                {
                  "assignments": [
                    295
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 295,
                      "mutability": "mutable",
                      "name": "requestId",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 345,
                      "src": "2490:17:16",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 294,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2490:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 303,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 299,
                            "name": "_sender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 271,
                            "src": "2537:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 300,
                            "name": "_nonce",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 281,
                            "src": "2546:6:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 297,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "2520:3:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 298,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "2520:16:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 301,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2520:33:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 296,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "2510:9:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 302,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2510:44:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2490:64:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 313,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 305,
                              "name": "commitments",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 231,
                              "src": "2568:11:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$225_storage_$",
                                "typeString": "mapping(bytes32 => struct MockOracle.Request storage ref)"
                              }
                            },
                            "id": 307,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 306,
                              "name": "requestId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 295,
                              "src": "2580:9:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2568:22:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Request_$225_storage",
                              "typeString": "struct MockOracle.Request storage ref"
                            }
                          },
                          "id": 308,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "callbackAddr",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 222,
                          "src": "2568:35:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 311,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2615:1:16",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 310,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2607:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 309,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2607:7:16",
                              "typeDescriptions": {
                                "typeIdentifier": null,
                                "typeString": null
                              }
                            }
                          },
                          "id": 312,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2607:10:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "2568:49:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4d75737420757365206120756e69717565204944",
                        "id": 314,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2619:22:16",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_da89408418f1aa3860811d2e64085e2b94d33f2815f2070010f4d0def719e723",
                          "typeString": "literal_string \"Must use a unique ID\""
                        },
                        "value": "Must use a unique ID"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_da89408418f1aa3860811d2e64085e2b94d33f2815f2070010f4d0def719e723",
                          "typeString": "literal_string \"Must use a unique ID\""
                        }
                      ],
                      "id": 304,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2560:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 315,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2560:82:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 316,
                  "nodeType": "ExpressionStatement",
                  "src": "2560:82:16"
                },
                {
                  "assignments": [
                    318
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 318,
                      "mutability": "mutable",
                      "name": "expiration",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 345,
                      "src": "2698:18:16",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 317,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2698:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 323,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 321,
                        "name": "EXPIRY_TIME",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 217,
                        "src": "2727:11:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 319,
                        "name": "now",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -17,
                        "src": "2719:3:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 320,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "add",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1476,
                      "src": "2719:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 322,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2719:20:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2698:41:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 331,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 324,
                        "name": "commitments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 231,
                        "src": "2746:11:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$225_storage_$",
                          "typeString": "mapping(bytes32 => struct MockOracle.Request storage ref)"
                        }
                      },
                      "id": 326,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 325,
                        "name": "requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 295,
                        "src": "2758:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2746:22:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Request_$225_storage",
                        "typeString": "struct MockOracle.Request storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 328,
                          "name": "_callbackAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 277,
                          "src": "2788:16:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 329,
                          "name": "_callbackFunctionId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 279,
                          "src": "2814:19:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        ],
                        "id": 327,
                        "name": "Request",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 225,
                        "src": "2771:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Request_$225_storage_ptr_$",
                          "typeString": "type(struct MockOracle.Request storage pointer)"
                        }
                      },
                      "id": 330,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2771:68:16",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Request_$225_memory_ptr",
                        "typeString": "struct MockOracle.Request memory"
                      }
                    },
                    "src": "2746:93:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Request_$225_storage",
                      "typeString": "struct MockOracle.Request storage ref"
                    }
                  },
                  "id": 332,
                  "nodeType": "ExpressionStatement",
                  "src": "2746:93:16"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 334,
                        "name": "_specId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 275,
                        "src": "2872:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 335,
                        "name": "_sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 271,
                        "src": "2887:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 336,
                        "name": "requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 295,
                        "src": "2902:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 337,
                        "name": "_payment",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 273,
                        "src": "2919:8:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 338,
                        "name": "_callbackAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 277,
                        "src": "2935:16:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 339,
                        "name": "_callbackFunctionId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 279,
                        "src": "2959:19:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 340,
                        "name": "expiration",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 318,
                        "src": "2986:10:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 341,
                        "name": "_dataVersion",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 283,
                        "src": "3004:12:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 342,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 285,
                        "src": "3024:5:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "id": 333,
                      "name": "OracleRequest",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 251,
                      "src": "2851:13:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_bytes32_$_t_uint256_$_t_address_$_t_bytes4_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (bytes32,address,bytes32,uint256,address,bytes4,uint256,uint256,bytes memory)"
                      }
                    },
                    "id": 343,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2851:179:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 344,
                  "nodeType": "EmitStatement",
                  "src": "2846:184:16"
                }
              ]
            },
            "documentation": {
              "id": 269,
              "nodeType": "StructuredDocumentation",
              "src": "1516:654:16",
              "text": " @notice Creates the Chainlink request\n @dev Stores the hash of the params as the on-chain commitment for the request.\n Emits OracleRequest event for the Chainlink node to detect.\n @param _sender The sender of the request\n @param _payment The amount of payment given (specified in wei)\n @param _specId The Job Specification ID\n @param _callbackAddress The callback address for the response\n @param _callbackFunctionId The callback function ID for the response\n @param _nonce The nonce sent by the requester\n @param _dataVersion The specified data version\n @param _data The CBOR payload of the request"
            },
            "functionSelector": "40429946",
            "id": 346,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 289,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 288,
                  "name": "onlyLINK",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1285,
                  "src": "2428:8:16",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2428:10:16"
              },
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 291,
                    "name": "_callbackAddress",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 277,
                    "src": "2464:16:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 292,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 290,
                  "name": "checkCallbackAddress",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 497,
                  "src": "2443:20:16",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_address_$",
                    "typeString": "modifier (address)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2443:38:16"
              }
            ],
            "name": "oracleRequest",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 287,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2415:8:16"
            },
            "parameters": {
              "id": 286,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 271,
                  "mutability": "mutable",
                  "name": "_sender",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 346,
                  "src": "2201:15:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 270,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2201:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 273,
                  "mutability": "mutable",
                  "name": "_payment",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 346,
                  "src": "2222:16:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 272,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2222:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 275,
                  "mutability": "mutable",
                  "name": "_specId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 346,
                  "src": "2244:15:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 274,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2244:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 277,
                  "mutability": "mutable",
                  "name": "_callbackAddress",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 346,
                  "src": "2265:24:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 276,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2265:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 279,
                  "mutability": "mutable",
                  "name": "_callbackFunctionId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 346,
                  "src": "2295:26:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 278,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "2295:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 281,
                  "mutability": "mutable",
                  "name": "_nonce",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 346,
                  "src": "2327:14:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 280,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2327:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 283,
                  "mutability": "mutable",
                  "name": "_dataVersion",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 346,
                  "src": "2347:20:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 282,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2347:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 285,
                  "mutability": "mutable",
                  "name": "_data",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 346,
                  "src": "2373:20:16",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 284,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2373:5:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2195:202:16"
            },
            "returnParameters": {
              "id": 293,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2484:0:16"
            },
            "scope": 498,
            "src": "2173:862:16",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 394,
              "nodeType": "Block",
              "src": "3682:619:16",
              "statements": [
                {
                  "assignments": [
                    360
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 360,
                      "mutability": "mutable",
                      "name": "req",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 394,
                      "src": "3688:18:16",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Request_$225_memory_ptr",
                        "typeString": "struct MockOracle.Request"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 359,
                        "name": "Request",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 225,
                        "src": "3688:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Request_$225_storage_ptr",
                          "typeString": "struct MockOracle.Request"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 364,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 361,
                      "name": "commitments",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 231,
                      "src": "3709:11:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$225_storage_$",
                        "typeString": "mapping(bytes32 => struct MockOracle.Request storage ref)"
                      }
                    },
                    "id": 363,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 362,
                      "name": "_requestId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 349,
                      "src": "3721:10:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3709:23:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Request_$225_storage",
                      "typeString": "struct MockOracle.Request storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3688:44:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 368,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "3738:30:16",
                    "subExpression": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 365,
                        "name": "commitments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 231,
                        "src": "3745:11:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$225_storage_$",
                          "typeString": "mapping(bytes32 => struct MockOracle.Request storage ref)"
                        }
                      },
                      "id": 367,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 366,
                        "name": "_requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 349,
                        "src": "3757:10:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3745:23:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Request_$225_storage",
                        "typeString": "struct MockOracle.Request storage ref"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 369,
                  "nodeType": "ExpressionStatement",
                  "src": "3738:30:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 374,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 371,
                            "name": "gasleft",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -7,
                            "src": "3782:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_gasleft_view$__$returns$_t_uint256_$",
                              "typeString": "function () view returns (uint256)"
                            }
                          },
                          "id": 372,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3782:9:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 373,
                          "name": "MINIMUM_CONSUMER_GAS_LIMIT",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 220,
                          "src": "3795:26:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3782:39:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173",
                        "id": 375,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3823:34:16",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e41e236f8c707f430128aec8d4f13fd0193750a557f2c094e8feda34850363f4",
                          "typeString": "literal_string \"Must provide consumer enough gas\""
                        },
                        "value": "Must provide consumer enough gas"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e41e236f8c707f430128aec8d4f13fd0193750a557f2c094e8feda34850363f4",
                          "typeString": "literal_string \"Must provide consumer enough gas\""
                        }
                      ],
                      "id": 370,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3774:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 376,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3774:84:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 377,
                  "nodeType": "ExpressionStatement",
                  "src": "3774:84:16"
                },
                {
                  "assignments": [
                    379,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 379,
                      "mutability": "mutable",
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 394,
                      "src": "4124:12:16",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 378,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "4124:4:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 391,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 385,
                              "name": "req",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 360,
                              "src": "4187:3:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Request_$225_memory_ptr",
                                "typeString": "struct MockOracle.Request memory"
                              }
                            },
                            "id": 386,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "callbackFunctionId",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 224,
                            "src": "4187:22:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 387,
                            "name": "_requestId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 349,
                            "src": "4211:10:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 388,
                            "name": "_data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 351,
                            "src": "4223:5:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 383,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4164:3:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 384,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSelector",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "4164:22:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (bytes4) pure returns (bytes memory)"
                          }
                        },
                        "id": 389,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4164:65:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 380,
                          "name": "req",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 360,
                          "src": "4142:3:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Request_$225_memory_ptr",
                            "typeString": "struct MockOracle.Request memory"
                          }
                        },
                        "id": 381,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "callbackAddr",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 222,
                        "src": "4142:16:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 382,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "call",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "4142:21:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 390,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4142:88:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4123:107:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 392,
                    "name": "success",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 379,
                    "src": "4289:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 358,
                  "id": 393,
                  "nodeType": "Return",
                  "src": "4282:14:16"
                }
              ]
            },
            "documentation": {
              "id": 347,
              "nodeType": "StructuredDocumentation",
              "src": "3039:498:16",
              "text": " @notice Called by the Chainlink node to fulfill requests\n @dev Given params must hash back to the commitment stored from `oracleRequest`.\n Will call the callback address' callback function without bubbling up error\n checking in a `require` so that the node can get paid.\n @param _requestId The fulfillment request ID that must match the requester's\n @param _data The data to return to the consuming contract\n @return Status if the external call was successful"
            },
            "functionSelector": "1f8f238c",
            "id": 395,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 354,
                    "name": "_requestId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 349,
                    "src": "3649:10:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 355,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 353,
                  "name": "isValidRequest",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 480,
                  "src": "3634:14:16",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_bytes32_$",
                    "typeString": "modifier (bytes32)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3634:26:16"
              }
            ],
            "name": "fulfillOracleRequest",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 352,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 349,
                  "mutability": "mutable",
                  "name": "_requestId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 395,
                  "src": "3575:18:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 348,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3575:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 351,
                  "mutability": "mutable",
                  "name": "_data",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 395,
                  "src": "3599:13:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 350,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3599:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3569:47:16"
            },
            "returnParameters": {
              "id": 358,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 357,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 395,
                  "src": "3674:4:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 356,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3674:4:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3673:6:16"
            },
            "scope": 498,
            "src": "3540:761:16",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              1351
            ],
            "body": {
              "id": 446,
              "nodeType": "Block",
              "src": "4943:337:16",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 417,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 409,
                              "name": "commitments",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 231,
                              "src": "4957:11:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$225_storage_$",
                                "typeString": "mapping(bytes32 => struct MockOracle.Request storage ref)"
                              }
                            },
                            "id": 411,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 410,
                              "name": "_requestId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 398,
                              "src": "4969:10:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4957:23:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Request_$225_storage",
                              "typeString": "struct MockOracle.Request storage ref"
                            }
                          },
                          "id": 412,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "callbackAddr",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 222,
                          "src": "4957:36:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 415,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5005:1:16",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 414,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4997:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 413,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4997:7:16",
                              "typeDescriptions": {
                                "typeIdentifier": null,
                                "typeString": null
                              }
                            }
                          },
                          "id": 416,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4997:10:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "4957:50:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4d75737420757365206120756e69717565204944",
                        "id": 418,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5009:22:16",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_da89408418f1aa3860811d2e64085e2b94d33f2815f2070010f4d0def719e723",
                          "typeString": "literal_string \"Must use a unique ID\""
                        },
                        "value": "Must use a unique ID"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_da89408418f1aa3860811d2e64085e2b94d33f2815f2070010f4d0def719e723",
                          "typeString": "literal_string \"Must use a unique ID\""
                        }
                      ],
                      "id": 408,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4949:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 419,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4949:83:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 420,
                  "nodeType": "ExpressionStatement",
                  "src": "4949:83:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 424,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 422,
                          "name": "_expiration",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 404,
                          "src": "5096:11:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 423,
                          "name": "now",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -17,
                          "src": "5111:3:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5096:18:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "52657175657374206973206e6f742065787069726564",
                        "id": 425,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5116:24:16",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4469681584edb09f4c5168c152dcbc615ee04be0f2982d1d010c0509f79b076c",
                          "typeString": "literal_string \"Request is not expired\""
                        },
                        "value": "Request is not expired"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4469681584edb09f4c5168c152dcbc615ee04be0f2982d1d010c0509f79b076c",
                          "typeString": "literal_string \"Request is not expired\""
                        }
                      ],
                      "id": 421,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5088:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 426,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5088:53:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 427,
                  "nodeType": "ExpressionStatement",
                  "src": "5088:53:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 431,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "5148:30:16",
                    "subExpression": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 428,
                        "name": "commitments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 231,
                        "src": "5155:11:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$225_storage_$",
                          "typeString": "mapping(bytes32 => struct MockOracle.Request storage ref)"
                        }
                      },
                      "id": 430,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 429,
                        "name": "_requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 398,
                        "src": "5167:10:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5155:23:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Request_$225_storage",
                        "typeString": "struct MockOracle.Request storage ref"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 432,
                  "nodeType": "ExpressionStatement",
                  "src": "5148:30:16"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 434,
                        "name": "_requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 398,
                        "src": "5209:10:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 433,
                      "name": "CancelOracleRequest",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 255,
                      "src": "5189:19:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$returns$__$",
                        "typeString": "function (bytes32)"
                      }
                    },
                    "id": 435,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5189:31:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 436,
                  "nodeType": "EmitStatement",
                  "src": "5184:36:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 440,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "5253:3:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 441,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "5253:10:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 442,
                            "name": "_payment",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 400,
                            "src": "5265:8:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 438,
                            "name": "LinkToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 227,
                            "src": "5234:9:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_LinkTokenInterface_$1447",
                              "typeString": "contract LinkTokenInterface"
                            }
                          },
                          "id": 439,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1424,
                          "src": "5234:18:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 443,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5234:40:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 437,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -3,
                      "src": "5227:6:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 444,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5227:48:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 445,
                  "nodeType": "ExpressionStatement",
                  "src": "5227:48:16"
                }
              ]
            },
            "documentation": {
              "id": 396,
              "nodeType": "StructuredDocumentation",
              "src": "4305:491:16",
              "text": " @notice Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK\n sent for the request back to the requester's address.\n @dev Given params must hash to a commitment stored on the contract in order for the request to be valid\n Emits CancelOracleRequest event.\n @param _requestId The request ID\n @param _payment The amount of payment given (specified in wei)\n @param _expiration The time of the expiration for the request"
            },
            "functionSelector": "6ee4d553",
            "id": 447,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "cancelOracleRequest",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 406,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4932:8:16"
            },
            "parameters": {
              "id": 405,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 398,
                  "mutability": "mutable",
                  "name": "_requestId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 447,
                  "src": "4833:18:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 397,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4833:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 400,
                  "mutability": "mutable",
                  "name": "_payment",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 447,
                  "src": "4857:16:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 399,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4857:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 402,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 447,
                  "src": "4879:6:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 401,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "4879:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 404,
                  "mutability": "mutable",
                  "name": "_expiration",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 447,
                  "src": "4891:19:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 403,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4891:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4827:87:16"
            },
            "returnParameters": {
              "id": 407,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4943:0:16"
            },
            "scope": 498,
            "src": "4799:481:16",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              1271
            ],
            "body": {
              "id": 459,
              "nodeType": "Block",
              "src": "5569:36:16",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 456,
                        "name": "LinkToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 227,
                        "src": "5590:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_LinkTokenInterface_$1447",
                          "typeString": "contract LinkTokenInterface"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_LinkTokenInterface_$1447",
                          "typeString": "contract LinkTokenInterface"
                        }
                      ],
                      "id": 455,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "5582:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 454,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5582:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": null,
                          "typeString": null
                        }
                      }
                    },
                    "id": 457,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5582:18:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 453,
                  "id": 458,
                  "nodeType": "Return",
                  "src": "5575:25:16"
                }
              ]
            },
            "documentation": {
              "id": 448,
              "nodeType": "StructuredDocumentation",
              "src": "5284:196:16",
              "text": " @notice Returns the address of the LINK token\n @dev This is the public implementation for chainlinkTokenAddress, which is\n an internal method of the ChainlinkClient contract"
            },
            "functionSelector": "165d35e1",
            "id": 460,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getChainlinkToken",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 450,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5536:8:16"
            },
            "parameters": {
              "id": 449,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5509:2:16"
            },
            "returnParameters": {
              "id": 453,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 452,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 460,
                  "src": "5558:7:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 451,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5558:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5557:9:16"
            },
            "scope": 498,
            "src": "5483:122:16",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 479,
              "nodeType": "Block",
              "src": "5805:108:16",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 474,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 466,
                              "name": "commitments",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 231,
                              "src": "5819:11:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$225_storage_$",
                                "typeString": "mapping(bytes32 => struct MockOracle.Request storage ref)"
                              }
                            },
                            "id": 468,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 467,
                              "name": "_requestId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 463,
                              "src": "5831:10:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "5819:23:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Request_$225_storage",
                              "typeString": "struct MockOracle.Request storage ref"
                            }
                          },
                          "id": 469,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "callbackAddr",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 222,
                          "src": "5819:36:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 472,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5867:1:16",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 471,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5859:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 470,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "5859:7:16",
                              "typeDescriptions": {
                                "typeIdentifier": null,
                                "typeString": null
                              }
                            }
                          },
                          "id": 473,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5859:10:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "5819:50:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4d757374206861766520612076616c696420726571756573744964",
                        "id": 475,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5871:29:16",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_03ea8cfeff0459e125641b51ffaeaacb881b172abb4a1cae381360ba7e33f193",
                          "typeString": "literal_string \"Must have a valid requestId\""
                        },
                        "value": "Must have a valid requestId"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_03ea8cfeff0459e125641b51ffaeaacb881b172abb4a1cae381360ba7e33f193",
                          "typeString": "literal_string \"Must have a valid requestId\""
                        }
                      ],
                      "id": 465,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5811:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 476,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5811:90:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 477,
                  "nodeType": "ExpressionStatement",
                  "src": "5811:90:16"
                },
                {
                  "id": 478,
                  "nodeType": "PlaceholderStatement",
                  "src": "5907:1:16"
                }
              ]
            },
            "documentation": {
              "id": 461,
              "nodeType": "StructuredDocumentation",
              "src": "5625:133:16",
              "text": " @dev Reverts if request ID does not exist\n @param _requestId The given request ID to check in stored `commitments`"
            },
            "id": 480,
            "name": "isValidRequest",
            "nodeType": "ModifierDefinition",
            "overrides": null,
            "parameters": {
              "id": 464,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 463,
                  "mutability": "mutable",
                  "name": "_requestId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 480,
                  "src": "5785:18:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 462,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5785:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5784:20:16"
            },
            "src": "5761:152:16",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 496,
              "nodeType": "Block",
              "src": "6070:79:16",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 491,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 486,
                          "name": "_to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 483,
                          "src": "6084:3:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 489,
                              "name": "LinkToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 227,
                              "src": "6099:9:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_LinkTokenInterface_$1447",
                                "typeString": "contract LinkTokenInterface"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_LinkTokenInterface_$1447",
                                "typeString": "contract LinkTokenInterface"
                              }
                            ],
                            "id": 488,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6091:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 487,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "6091:7:16",
                              "typeDescriptions": {
                                "typeIdentifier": null,
                                "typeString": null
                              }
                            }
                          },
                          "id": 490,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6091:18:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6084:25:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "43616e6e6f742063616c6c6261636b20746f204c494e4b",
                        "id": 492,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6111:25:16",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3c91bf1db15c019a879a37eef54af733a5f0801faedda1a37e217ea60f3cdcf4",
                          "typeString": "literal_string \"Cannot callback to LINK\""
                        },
                        "value": "Cannot callback to LINK"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3c91bf1db15c019a879a37eef54af733a5f0801faedda1a37e217ea60f3cdcf4",
                          "typeString": "literal_string \"Cannot callback to LINK\""
                        }
                      ],
                      "id": 485,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6076:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 493,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6076:61:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 494,
                  "nodeType": "ExpressionStatement",
                  "src": "6076:61:16"
                },
                {
                  "id": 495,
                  "nodeType": "PlaceholderStatement",
                  "src": "6143:1:16"
                }
              ]
            },
            "documentation": {
              "id": 481,
              "nodeType": "StructuredDocumentation",
              "src": "5918:106:16",
              "text": " @dev Reverts if the callback address is the LINK token\n @param _to The callback address"
            },
            "id": 497,
            "name": "checkCallbackAddress",
            "nodeType": "ModifierDefinition",
            "overrides": null,
            "parameters": {
              "id": 484,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 483,
                  "mutability": "mutable",
                  "name": "_to",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 497,
                  "src": "6057:11:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 482,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6057:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6056:13:16"
            },
            "src": "6027:122:16",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 499,
        "src": "472:5680:16"
      }
    ],
    "src": "32:6121:16"
  },
  "bytecode": "608060405234801561001057600080fd5b50604051610c3a380380610c3a8339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610bd5806100656000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063165d35e1146100675780631f8f238c1461008b57806340429946146100c25780634b602282146101755780636ee4d5531461018f578063a4c0ed36146101c8575b600080fd5b61006f610283565b604080516001600160a01b039092168252519081900360200190f35b6100ae600480360360408110156100a157600080fd5b5080359060200135610292565b604080519115158252519081900360200190f35b61017360048036036101008110156100d957600080fd5b6001600160a01b038235811692602081013592604082013592606083013516916001600160e01b03196080820135169160a08201359160c081013591810190610100810160e082013564010000000081111561013457600080fd5b82018360208201111561014657600080fd5b8035906020019184600183028401116401000000008311171561016857600080fd5b5090925090506104a9565b005b61017d610776565b60408051918252519081900360200190f35b610173600480360360808110156101a557600080fd5b508035906020810135906001600160e01b0319604082013516906060013561077c565b610173600480360360608110156101de57600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561020e57600080fd5b82018360208201111561022057600080fd5b8035906020019184600183028401116401000000008311171561024257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506108fa945050505050565b6000546001600160a01b031690565b60008281526001602052604081205483906001600160a01b03166102fd576040805162461bcd60e51b815260206004820152601b60248201527f4d757374206861766520612076616c6964207265717565737449640000000000604482015290519081900360640190fd5b610305610b88565b506000848152600160208181526040808420815180830190925280546001600160a01b03811683526001600160e01b0319600160a01b820460e01b168385015294899052929091526001600160c01b0319909216905562061a805a10156103b3576040805162461bcd60e51b815260206004820181905260248201527f4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173604482015290519081900360640190fd5b805160208083015160408051602481018a905260448082018a9052825180830390910181526064909101825292830180516001600160e01b03166001600160e01b03199093169290921782525182516000946001600160a01b0316939282918083835b602083106104355780518252601f199092019160209182019101610416565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610497576040519150601f19603f3d011682016040523d82523d6000602084013e61049c565b606091505b5090979650505050505050565b6104b1610283565b6001600160a01b0316336001600160a01b03161461050c576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b60005486906001600160a01b0380831691161415610571576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f742063616c6c6261636b20746f204c494e4b000000000000000000604482015290519081900360640190fd5b604080516bffffffffffffffffffffffff1960608d901b166020808301919091526034808301899052835180840390910181526054909201835281519181019190912060008181526001909252919020546001600160a01b031615610614576040805162461bcd60e51b8152602060048201526014602482015273135d5cdd081d5cd94818481d5b9a5c5d5948125160621b604482015290519081900360640190fd5b60006106224261012c610b27565b905060405180604001604052808a6001600160a01b03168152602001896001600160e01b0319168152506001600084815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548163ffffffff021916908360e01c0217905550905050897fd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c658d848e8d8d878d8d8d604051808a6001600160a01b03168152602001898152602001888152602001876001600160a01b03168152602001866001600160e01b0319168152602001858152602001848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039c50909a5050505050505050505050a2505050505050505050505050565b61012c81565b6000848152600160205260409020546001600160a01b03166107dc576040805162461bcd60e51b8152602060048201526014602482015273135d5cdd081d5cd94818481d5b9a5c5d5948125160621b604482015290519081900360640190fd5b4281111561082a576040805162461bcd60e51b815260206004820152601660248201527514995c5d595cdd081a5cc81b9bdd08195e1c1a5c995960521b604482015290519081900360640190fd5b60008481526001602052604080822080546001600160c01b03191690555185917fa7842b9ec549398102c0d91b1b9919b2f20558aefdadf57528a95c6cd3292e9391a2600080546040805163a9059cbb60e01b81523360048201526024810187905290516001600160a01b039092169263a9059cbb926044808401936020939083900390910190829087803b1580156108c257600080fd5b505af11580156108d6573d6000803e3d6000fd5b505050506040513d60208110156108ec57600080fd5b50516108f457fe5b50505050565b610902610283565b6001600160a01b0316336001600160a01b03161461095d576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b80518190604411156109af576040805162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840e4cae2eacae6e840d8cadccee8d60531b604482015290519081900360640190fd5b602082015182906001600160e01b031981166320214ca360e11b14610a1b576040805162461bcd60e51b815260206004820152601e60248201527f4d757374207573652077686974656c69737465642066756e6374696f6e730000604482015290519081900360640190fd5b8560248501528460448501526000306001600160a01b0316856040518082805190602001908083835b60208310610a635780518252601f199092019160209182019101610a44565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610ac3576040519150601f19603f3d011682016040523d82523d6000602084013e610ac8565b606091505b5050905080610b1e576040805162461bcd60e51b815260206004820152601860248201527f556e61626c6520746f2063726561746520726571756573740000000000000000604482015290519081900360640190fd5b50505050505050565b600082820183811015610b81576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60408051808201909152600080825260208201529056fea2646970667358221220c85bc60aa5b12ed117d3a08bcf0cc78507062eef3c0191ad4249eacf560dc9b064736f6c634300060c0033",
  "bytecodeSha1": "7f09d8b642ed1af8d9a3e094ab619f25db4db23c",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.6.12+commit.27d51765"
  },
  "contractName": "MockOracle",
  "coverageMap": {
    "branches": {
      "13": {
        "SafeMath.add": {
          "20": [
            926,
            932,
            true
          ]
        }
      },
      "16": {
        "MockOracle.cancelOracleRequest": {
          "17": [
            5096,
            5114,
            true
          ]
        },
        "MockOracle.fulfillOracleRequest": {
          "14": [
            3782,
            3821,
            true
          ]
        },
        "MockOracle.oracleRequest": {
          "15": [
            6084,
            6109,
            true
          ],
          "16": [
            2568,
            2617,
            true
          ]
        }
      },
      "2": {
        "LinkTokenReceiver.onTokenTransfer": {
          "18": [
            1552,
            1585,
            true
          ],
          "19": [
            1340,
            1347,
            true
          ]
        }
      },
      "6": {},
      "8": {}
    },
    "statements": {
      "13": {
        "SafeMath.add": {
          "12": [
            918,
            964
          ],
          "13": [
            971,
            979
          ]
        }
      },
      "16": {
        "MockOracle.cancelOracleRequest": {
          "6": [
            4949,
            5032
          ],
          "7": [
            5088,
            5141
          ],
          "8": [
            5148,
            5178
          ],
          "9": [
            5184,
            5220
          ],
          "10": [
            5227,
            5275
          ]
        },
        "MockOracle.fulfillOracleRequest": {
          "1": [
            3738,
            3768
          ],
          "2": [
            3774,
            3858
          ]
        },
        "MockOracle.getChainlinkToken": {
          "0": [
            5575,
            5600
          ]
        },
        "MockOracle.oracleRequest": {
          "3": [
            2560,
            2642
          ],
          "4": [
            2746,
            2839
          ],
          "5": [
            2846,
            3030
          ]
        }
      },
      "2": {
        "LinkTokenReceiver.onTokenTransfer": {
          "11": [
            1332,
            1376
          ]
        }
      },
      "6": {},
      "8": {}
    }
  },
  "dependencies": [
    "alphachainio/chainlink-contracts@1.1.2/ChainlinkRequestInterface",
    "alphachainio/chainlink-contracts@1.1.2/LinkTokenInterface",
    "alphachainio/chainlink-contracts@1.1.2/LinkTokenReceiver",
    "alphachainio/chainlink-contracts@1.1.2/SafeMath"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100625760003560e01c8063165d35e1146100675780631f8f238c1461008b57806340429946146100c25780634b602282146101755780636ee4d5531461018f578063a4c0ed36146101c8575b600080fd5b61006f610283565b604080516001600160a01b039092168252519081900360200190f35b6100ae600480360360408110156100a157600080fd5b5080359060200135610292565b604080519115158252519081900360200190f35b61017360048036036101008110156100d957600080fd5b6001600160a01b038235811692602081013592604082013592606083013516916001600160e01b03196080820135169160a08201359160c081013591810190610100810160e082013564010000000081111561013457600080fd5b82018360208201111561014657600080fd5b8035906020019184600183028401116401000000008311171561016857600080fd5b5090925090506104a9565b005b61017d610776565b60408051918252519081900360200190f35b610173600480360360808110156101a557600080fd5b508035906020810135906001600160e01b0319604082013516906060013561077c565b610173600480360360608110156101de57600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561020e57600080fd5b82018360208201111561022057600080fd5b8035906020019184600183028401116401000000008311171561024257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506108fa945050505050565b6000546001600160a01b031690565b60008281526001602052604081205483906001600160a01b03166102fd576040805162461bcd60e51b815260206004820152601b60248201527f4d757374206861766520612076616c6964207265717565737449640000000000604482015290519081900360640190fd5b610305610b88565b506000848152600160208181526040808420815180830190925280546001600160a01b03811683526001600160e01b0319600160a01b820460e01b168385015294899052929091526001600160c01b0319909216905562061a805a10156103b3576040805162461bcd60e51b815260206004820181905260248201527f4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173604482015290519081900360640190fd5b805160208083015160408051602481018a905260448082018a9052825180830390910181526064909101825292830180516001600160e01b03166001600160e01b03199093169290921782525182516000946001600160a01b0316939282918083835b602083106104355780518252601f199092019160209182019101610416565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610497576040519150601f19603f3d011682016040523d82523d6000602084013e61049c565b606091505b5090979650505050505050565b6104b1610283565b6001600160a01b0316336001600160a01b03161461050c576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b60005486906001600160a01b0380831691161415610571576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f742063616c6c6261636b20746f204c494e4b000000000000000000604482015290519081900360640190fd5b604080516bffffffffffffffffffffffff1960608d901b166020808301919091526034808301899052835180840390910181526054909201835281519181019190912060008181526001909252919020546001600160a01b031615610614576040805162461bcd60e51b8152602060048201526014602482015273135d5cdd081d5cd94818481d5b9a5c5d5948125160621b604482015290519081900360640190fd5b60006106224261012c610b27565b905060405180604001604052808a6001600160a01b03168152602001896001600160e01b0319168152506001600084815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548163ffffffff021916908360e01c0217905550905050897fd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c658d848e8d8d878d8d8d604051808a6001600160a01b03168152602001898152602001888152602001876001600160a01b03168152602001866001600160e01b0319168152602001858152602001848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039c50909a5050505050505050505050a2505050505050505050505050565b61012c81565b6000848152600160205260409020546001600160a01b03166107dc576040805162461bcd60e51b8152602060048201526014602482015273135d5cdd081d5cd94818481d5b9a5c5d5948125160621b604482015290519081900360640190fd5b4281111561082a576040805162461bcd60e51b815260206004820152601660248201527514995c5d595cdd081a5cc81b9bdd08195e1c1a5c995960521b604482015290519081900360640190fd5b60008481526001602052604080822080546001600160c01b03191690555185917fa7842b9ec549398102c0d91b1b9919b2f20558aefdadf57528a95c6cd3292e9391a2600080546040805163a9059cbb60e01b81523360048201526024810187905290516001600160a01b039092169263a9059cbb926044808401936020939083900390910190829087803b1580156108c257600080fd5b505af11580156108d6573d6000803e3d6000fd5b505050506040513d60208110156108ec57600080fd5b50516108f457fe5b50505050565b610902610283565b6001600160a01b0316336001600160a01b03161461095d576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b80518190604411156109af576040805162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840e4cae2eacae6e840d8cadccee8d60531b604482015290519081900360640190fd5b602082015182906001600160e01b031981166320214ca360e11b14610a1b576040805162461bcd60e51b815260206004820152601e60248201527f4d757374207573652077686974656c69737465642066756e6374696f6e730000604482015290519081900360640190fd5b8560248501528460448501526000306001600160a01b0316856040518082805190602001908083835b60208310610a635780518252601f199092019160209182019101610a44565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610ac3576040519150601f19603f3d011682016040523d82523d6000602084013e610ac8565b606091505b5050905080610b1e576040805162461bcd60e51b815260206004820152601860248201527f556e61626c6520746f2063726561746520726571756573740000000000000000604482015290519081900360640190fd5b50505050505050565b600082820183811015610b81576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60408051808201909152600080825260208201529056fea2646970667358221220c85bc60aa5b12ed117d3a08bcf0cc78507062eef3c0191ad4249eacf560dc9b064736f6c634300060c0033",
  "deployedSourceMap": "472:5680:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5483:122;;;:::i;:::-;;;;-1:-1:-1;;;;;5483:122:16;;;;;;;;;;;;;;3540:761;;;;;;;;;;;;;;;;-1:-1:-1;3540:761:16;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;2173:862;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2173:862:16;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2173:862:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2173:862:16;;-1:-1:-1;2173:862:16;-1:-1:-1;2173:862:16;:::i;:::-;;575:47;;;:::i;:::-;;;;;;;;;;;;;;;;4799:481;;;;;;;;;;;;;;;;-1:-1:-1;4799:481:16;;;;;;;;-1:-1:-1;;;;;;4799:481:16;;;;;;;;;;:::i;718:663:2:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;718:663:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;718:663:2;;-1:-1:-1;718:663:2;;-1:-1:-1;;;;;718:663:2:i;5483:122:16:-;5558:7;5590:9;-1:-1:-1;;;;;5590:9:16;5483:122;:::o;3540:761::-;3674:4;5819:23;;;:11;:23;;;;;:36;3649:10;;-1:-1:-1;;;;;5819:36:16;5811:90;;;;;-1:-1:-1;;;5811:90:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;3688:18:::1;;:::i;:::-;-1:-1:-1::0;3709:23:16::1;::::0;;;:11:::1;:23;::::0;;;;;;;3688:44;;;;::::1;::::0;;;;;-1:-1:-1;;;;;3688:44:16;::::1;::::0;;-1:-1:-1;;;;;;;;;3688:44:16;::::1;;;;::::0;;::::1;::::0;3745:23;;;;;;;;-1:-1:-1;;;;;;3738:30:16;;;;;680:6:::1;3782:9;:39;;3774:84;;;::::0;;-1:-1:-1;;;3774:84:16;;::::1;;::::0;::::1;::::0;;;;;;;::::1;::::0;;;;;;;;;;;;;::::1;;4142:16:::0;;4187:22:::1;::::0;;::::1;::::0;4164:65:::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::1;::::0;;-1:-1:-1;;;;;4164:65:16::1;-1:-1:-1::0;;;;;;4164:65:16;;::::1;::::0;;;::::1;::::0;;4142:88;;;4124:12:::1;::::0;-1:-1:-1;;;;;4142:21:16::1;::::0;4164:65;4142:88;;;;4164:65;4142:88:::1;;;;;;::::0;;;;-1:-1:-1;;4142:88:16;;;;::::1;::::0;;::::1;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;4123:107:16;;3540:761;-1:-1:-1;;;;;;;3540:761:16:o;2173:862::-;1566:19:2;:17;:19::i;:::-;-1:-1:-1;;;;;1552:33:2;:10;-1:-1:-1;;;;;1552:33:2;;1544:65;;;;;-1:-1:-1;;;1544:65:2;;;;;;;;;;;;-1:-1:-1;;;1544:65:2;;;;;;;;;;;;;;;6099:9:16::1;::::0;2464:16;;-1:-1:-1;;;;;6084:25:16;;::::1;6099:9:::0;::::1;6084:25;;6076:61;;;::::0;;-1:-1:-1;;;6076:61:16;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;2520:33:::2;::::0;;-1:-1:-1;;2520:33:16::2;::::0;;;;::::2;::::0;;::::2;::::0;;;;;;;;;;;;;;;;;;;;;;;;;;;2510:44;;;;::::2;::::0;;;;2490:17:::2;2568:22:::0;;;:11:::2;:22:::0;;;;;;:35;-1:-1:-1;;;;;2568:35:16::2;:49:::0;2560:82:::2;;;::::0;;-1:-1:-1;;;2560:82:16;;::::2;;::::0;::::2;::::0;::::2;::::0;;;;-1:-1:-1;;;2560:82:16;;;;;;;;;;;;;::::2;;2698:18;2719:20;:3;613:9;2719:7;:20::i;:::-;2698:41;;2771:68;;;;;;;;2788:16;-1:-1:-1::0;;;;;2771:68:16::2;;;;;2814:19;-1:-1:-1::0;;;;;2771:68:16::2;;;;::::0;2746:11:::2;:22;2758:9;2746:22;;;;;;;;;;;:93;;;;;;;;;;;;;-1:-1:-1::0;;;;;2746:93:16::2;;;;;-1:-1:-1::0;;;;;2746:93:16::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2872:7;2851:179;2887:7;2902:9;2919:8;2935:16;2959:19;2986:10;3004:12;3024:5;;2851:179;;;;-1:-1:-1::0;;;;;2851:179:16::2;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;2851:179:16::2;;;;;;-1:-1:-1::0;;;;;2851:179:16::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;;::::2;::::0;::::2;::::0;::::2;::::0;;::::2;-1:-1:-1::0;;2851:179:16::2;::::0;;::::2;::::0;;::::2;::::0;-1:-1:-1;2851:179:16;;-1:-1:-1;;;;;;;;;;;2851:179:16::2;6143:1;;1615::2::1;2173:862:16::0;;;;;;;;;:::o;575:47::-;613:9;575:47;:::o;4799:481::-;5005:1;4957:23;;;:11;:23;;;;;:36;-1:-1:-1;;;;;4957:36:16;4949:83;;;;;-1:-1:-1;;;4949:83:16;;;;;;;;;;;;-1:-1:-1;;;4949:83:16;;;;;;;;;;;;;;;5111:3;5096:11;:18;;5088:53;;;;;-1:-1:-1;;;5088:53:16;;;;;;;;;;;;-1:-1:-1;;;5088:53:16;;;;;;;;;;;;;;;5155:23;;;;:11;:23;;;;;;5148:30;;-1:-1:-1;;;;;;5148:30:16;;;5189:31;5167:10;;5189:31;;;5234:9;;;:40;;;-1:-1:-1;;;5234:40:16;;5253:10;5234:40;;;;;;;;;;;;-1:-1:-1;;;;;5234:9:16;;;;:18;;:40;;;;;;;;;;;;;;;;;:9;:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5234:40:16;5227:48;;;;4799:481;;;;:::o;718:663:2:-;1566:19;:17;:19::i;:::-;-1:-1:-1;;;;;1552:33:2;:10;-1:-1:-1;;;;;1552:33:2;;1544:65;;;;;-1:-1:-1;;;1544:65:2;;;;;;;;;;;;-1:-1:-1;;;1544:65:2;;;;;;;;;;;;;;;2278:12;;860:5;;283:47;-1:-1:-1;2278:38:2::1;2270:73;;;::::0;;-1:-1:-1;;;2270:73:2;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;2270:73:2;;;;;;;;;;;;;::::1;;1974:2:::2;1963:14:::0;::::2;1957:21:::0;897:5;;-1:-1:-1;;;;;;1997:39:2;::::2;-1:-1:-1::0;;;1997:39:2::2;1989:82;;;::::0;;-1:-1:-1;;;1989:82:2;;::::2;;::::0;::::2;::::0;::::2;::::0;;;;::::2;::::0;;;;;;;;;;;;;::::2;;1009:7:::3;1004:2;997:5;993:14;986:31;1139:7;1134:2;1127:5;1123:14;1116:31;1252:12;1278:4;-1:-1:-1::0;;;;;1270:26:2::3;1297:5;1270:33;;;;;;;;;;;;;;;;;;;::::0;;;;-1:-1:-1;;1270:33:2;;;;::::3;::::0;;::::3;::::0;::::3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1251:52;;;1340:7;1332:44;;;::::0;;-1:-1:-1;;;1332:44:2;;::::3;;::::0;::::3;::::0;::::3;::::0;;;;::::3;::::0;;;;;;;;;;;;;::::3;;2077:1;2349::::2;;1615::::1;718:663:::0;;;:::o;822:162:13:-;880:7;907:5;;;926:6;;;;918:46;;;;;-1:-1:-1;;;918:46:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;978:1;822:162;-1:-1:-1;;;822:162:13:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;:::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "cancelOracleRequest(bytes32,uint256,bytes4,uint256)": {
        "details": "Given params must hash to a commitment stored on the contract in order for the request to be valid Emits CancelOracleRequest event.",
        "notice": "Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK sent for the request back to the requester's address.",
        "params": {
          "_expiration": "The time of the expiration for the request",
          "_payment": "The amount of payment given (specified in wei)",
          "_requestId": "The request ID"
        }
      },
      "constructor": {
        "details": "Sets the LinkToken address for the imported LinkTokenInterface",
        "params": {
          "_link": "The address of the LINK token"
        }
      },
      "fulfillOracleRequest(bytes32,bytes32)": {
        "details": "Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.",
        "notice": "Called by the Chainlink node to fulfill requests",
        "params": {
          "_data": "The data to return to the consuming contract",
          "_requestId": "The fulfillment request ID that must match the requester's"
        },
        "returns": {
          "_0": "Status if the external call was successful"
        }
      },
      "getChainlinkToken()": {
        "details": "This is the public implementation for chainlinkTokenAddress, which is an internal method of the ChainlinkClient contract",
        "notice": "Returns the address of the LINK token"
      },
      "onTokenTransfer(address,uint256,bytes)": {
        "details": "The data payload's first 2 words will be overwritten by the `_sender` and `_amount` values to ensure correctness. Calls oracleRequest.",
        "notice": "Called when LINK is sent to the contract via `transferAndCall`",
        "params": {
          "_amount": "Amount of LINK sent (specified in wei)",
          "_data": "Payload of the transaction",
          "_sender": "Address of the sender"
        }
      },
      "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": {
        "details": "Stores the hash of the params as the on-chain commitment for the request. Emits OracleRequest event for the Chainlink node to detect.",
        "notice": "Creates the Chainlink request",
        "params": {
          "_callbackAddress": "The callback address for the response",
          "_callbackFunctionId": "The callback function ID for the response",
          "_data": "The CBOR payload of the request",
          "_dataVersion": "The specified data version",
          "_nonce": "The nonce sent by the requester",
          "_payment": "The amount of payment given (specified in wei)",
          "_sender": "The sender of the request",
          "_specId": "The Job Specification ID"
        }
      }
    },
    "notice": "Chainlink smart contract developers can use this to test their contracts",
    "title": "The Chainlink Mock Oracle contract",
    "version": 1
  },
  "offset": [
    472,
    6152
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x165D35E1 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x1F8F238C EQ PUSH2 0x8B JUMPI DUP1 PUSH4 0x40429946 EQ PUSH2 0xC2 JUMPI DUP1 PUSH4 0x4B602282 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0x6EE4D553 EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0xA4C0ED36 EQ PUSH2 0x1C8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F PUSH2 0x283 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xAE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x292 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x173 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x100 DUP2 LT ISZERO PUSH2 0xD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP3 PUSH1 0x60 DUP4 ADD CALLDATALOAD AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x80 DUP3 ADD CALLDATALOAD AND SWAP2 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xC0 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH2 0x100 DUP2 ADD PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x4A9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x17D PUSH2 0x776 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x173 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x1A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 ADD CALLDATALOAD PUSH2 0x77C JUMP JUMPDEST PUSH2 0x173 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH1 0x60 DUP2 ADD PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x20E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x242 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x8FA SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2FD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374206861766520612076616C6964207265717565737449640000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x305 PUSH2 0xB88 JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV PUSH1 0xE0 SHL AND DUP4 DUP6 ADD MSTORE SWAP5 DUP10 SWAP1 MSTORE SWAP3 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT SWAP1 SWAP3 AND SWAP1 SSTORE PUSH3 0x61A80 GAS LT ISZERO PUSH2 0x3B3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742070726F7669646520636F6E73756D657220656E6F75676820676173 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP11 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD DUP3 MSTORE SWAP3 DUP4 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR DUP3 MSTORE MLOAD DUP3 MLOAD PUSH1 0x0 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 SWAP3 DUP3 SWAP2 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x435 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x416 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x497 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x49C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4B1 PUSH2 0x283 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x50C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x26BAB9BA103AB9B2902624A725903A37B5B2B7 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD DUP7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND SWAP2 AND EQ ISZERO PUSH2 0x571 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742063616C6C6261636B20746F204C494E4B000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP14 SWAP1 SHL AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x34 DUP1 DUP4 ADD DUP10 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x54 SWAP1 SWAP3 ADD DUP4 MSTORE DUP2 MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x614 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x135D5CDD081D5CD94818481D5B9A5C5D59481251 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x622 TIMESTAMP PUSH2 0x12C PUSH2 0xB27 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE POP PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH1 0xE0 SHR MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP10 PUSH32 0xD8D7ECC4800D25FA53CE0372F13A416D98907A7EF3D8D3BDD79CF4FE75529C65 DUP14 DUP5 DUP15 DUP14 DUP14 DUP8 DUP14 DUP14 DUP14 PUSH1 0x40 MLOAD DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP5 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP3 ADD DUP3 SWAP1 SUB SWAP13 POP SWAP1 SWAP11 POP POP POP POP POP POP POP POP POP POP POP LOG2 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x12C DUP2 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7DC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x135D5CDD081D5CD94818481D5B9A5C5D59481251 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST TIMESTAMP DUP2 GT ISZERO PUSH2 0x82A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x14995C5D595CDD081A5CC81B9BDD08195E1C1A5C9959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT AND SWAP1 SSTORE MLOAD DUP6 SWAP2 PUSH32 0xA7842B9EC549398102C0D91B1B9919B2F20558AEFDADF57528A95C6CD3292E93 SWAP2 LOG2 PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH1 0x44 DUP1 DUP5 ADD SWAP4 PUSH1 0x20 SWAP4 SWAP1 DUP4 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x8F4 JUMPI INVALID JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x902 PUSH2 0x283 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x95D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x26BAB9BA103AB9B2902624A725903A37B5B2B7 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 SWAP1 PUSH1 0x44 GT ISZERO PUSH2 0x9AF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x92DCECC2D8D2C840E4CAE2EACAE6E840D8CADCCEE8D PUSH1 0x53 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x20214CA3 PUSH1 0xE1 SHL EQ PUSH2 0xA1B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374207573652077686974656C69737465642066756E6374696F6E730000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP6 PUSH1 0x24 DUP6 ADD MSTORE DUP5 PUSH1 0x44 DUP6 ADD MSTORE PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xA63 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xA44 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xAC3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xAC8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xB1E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E61626C6520746F2063726561746520726571756573740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xB81 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC8 JUMPDEST 0xC6 EXP 0xA5 0xB1 0x2E 0xD1 OR 0xD3 LOG0 DUP12 0xCF 0xC 0xC7 DUP6 SMOD MOD 0x2E 0xEF EXTCODECOPY ADD SWAP2 0xAD TIMESTAMP 0x49 0xEA 0xCF JUMP 0xD 0xC9 0xB0 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        472,
        6152
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "5": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "CALLVALUE",
      "path": "16"
    },
    "6": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "DUP1",
      "path": "16"
    },
    "7": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "8": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "12": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "DUP1",
      "path": "16"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "REVERT",
      "path": "16"
    },
    "16": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "17": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "POP",
      "path": "16"
    },
    "18": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "CALLDATASIZE",
      "path": "16"
    },
    "21": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "LT",
      "path": "16"
    },
    "22": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x62"
    },
    "25": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "26": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "29": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "SHR",
      "path": "16"
    },
    "32": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "DUP1",
      "path": "16"
    },
    "33": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x165D35E1"
    },
    "38": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "EQ",
      "path": "16"
    },
    "39": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x67"
    },
    "42": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "43": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "DUP1",
      "path": "16"
    },
    "44": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x1F8F238C"
    },
    "49": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "EQ",
      "path": "16"
    },
    "50": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x8B"
    },
    "53": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "54": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "DUP1",
      "path": "16"
    },
    "55": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x40429946"
    },
    "60": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "EQ",
      "path": "16"
    },
    "61": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xC2"
    },
    "64": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "65": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "DUP1",
      "path": "16"
    },
    "66": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x4B602282"
    },
    "71": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "EQ",
      "path": "16"
    },
    "72": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x175"
    },
    "75": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "76": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "DUP1",
      "path": "16"
    },
    "77": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x6EE4D553"
    },
    "82": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "EQ",
      "path": "16"
    },
    "83": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x18F"
    },
    "86": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "87": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "DUP1",
      "path": "16"
    },
    "88": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0xA4C0ED36"
    },
    "93": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "EQ",
      "path": "16"
    },
    "94": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x1C8"
    },
    "97": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "98": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "99": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "101": {
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "DUP1",
      "path": "16"
    },
    "102": {
      "first_revert": true,
      "fn": null,
      "offset": [
        472,
        6152
      ],
      "op": "REVERT",
      "path": "16"
    },
    "103": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "104": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x6F"
    },
    "107": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x283"
    },
    "110": {
      "fn": "MockOracle.getChainlinkToken",
      "jump": "i",
      "offset": [
        5483,
        5605
      ],
      "op": "JUMP",
      "path": "16"
    },
    "111": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "112": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "114": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "DUP1",
      "path": "16"
    },
    "115": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "116": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "118": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "120": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "122": {
      "op": "SHL"
    },
    "123": {
      "op": "SUB"
    },
    "124": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "125": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "126": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "AND",
      "path": "16"
    },
    "127": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "DUP3",
      "path": "16"
    },
    "128": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "129": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "130": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "131": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "DUP2",
      "path": "16"
    },
    "132": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "133": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "SUB",
      "path": "16"
    },
    "134": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "136": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "ADD",
      "path": "16"
    },
    "137": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "138": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "RETURN",
      "path": "16"
    },
    "139": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "140": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xAE"
    },
    "143": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "145": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "DUP1",
      "path": "16"
    },
    "146": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "CALLDATASIZE",
      "path": "16"
    },
    "147": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "SUB",
      "path": "16"
    },
    "148": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "150": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "DUP2",
      "path": "16"
    },
    "151": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "LT",
      "path": "16"
    },
    "152": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "153": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xA1"
    },
    "156": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "157": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "159": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "DUP1",
      "path": "16"
    },
    "160": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "REVERT",
      "path": "16"
    },
    "161": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "162": {
      "op": "POP"
    },
    "163": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "DUP1",
      "path": "16"
    },
    "164": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "165": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "166": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "168": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "ADD",
      "path": "16"
    },
    "169": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "170": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x292"
    },
    "173": {
      "fn": "MockOracle.fulfillOracleRequest",
      "jump": "i",
      "offset": [
        3540,
        4301
      ],
      "op": "JUMP",
      "path": "16"
    },
    "174": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "175": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "177": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "DUP1",
      "path": "16"
    },
    "178": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "179": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "180": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "181": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "182": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "DUP3",
      "path": "16"
    },
    "183": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "184": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "185": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "186": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "DUP2",
      "path": "16"
    },
    "187": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "188": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "SUB",
      "path": "16"
    },
    "189": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "191": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "ADD",
      "path": "16"
    },
    "192": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "193": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "RETURN",
      "path": "16"
    },
    "194": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "195": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x173"
    },
    "198": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "200": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP1",
      "path": "16"
    },
    "201": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "CALLDATASIZE",
      "path": "16"
    },
    "202": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "SUB",
      "path": "16"
    },
    "203": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x100"
    },
    "206": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP2",
      "path": "16"
    },
    "207": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "LT",
      "path": "16"
    },
    "208": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "209": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xD9"
    },
    "212": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "213": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "215": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP1",
      "path": "16"
    },
    "216": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "REVERT",
      "path": "16"
    },
    "217": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "218": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "220": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "222": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "224": {
      "op": "SHL"
    },
    "225": {
      "op": "SUB"
    },
    "226": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP3",
      "path": "16"
    },
    "227": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "228": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP2",
      "path": "16"
    },
    "229": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "AND",
      "path": "16"
    },
    "230": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "231": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "233": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP2",
      "path": "16"
    },
    "234": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "ADD",
      "path": "16"
    },
    "235": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "236": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "237": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "239": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP3",
      "path": "16"
    },
    "240": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "ADD",
      "path": "16"
    },
    "241": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "242": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "243": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x60"
    },
    "245": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP4",
      "path": "16"
    },
    "246": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "ADD",
      "path": "16"
    },
    "247": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "248": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "AND",
      "path": "16"
    },
    "249": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "250": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "252": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "254": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "256": {
      "op": "SHL"
    },
    "257": {
      "op": "SUB"
    },
    "258": {
      "op": "NOT"
    },
    "259": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x80"
    },
    "261": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP3",
      "path": "16"
    },
    "262": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "ADD",
      "path": "16"
    },
    "263": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "264": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "AND",
      "path": "16"
    },
    "265": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "266": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0xA0"
    },
    "268": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP3",
      "path": "16"
    },
    "269": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "ADD",
      "path": "16"
    },
    "270": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "271": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "272": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0xC0"
    },
    "274": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP2",
      "path": "16"
    },
    "275": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "ADD",
      "path": "16"
    },
    "276": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "277": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "278": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP2",
      "path": "16"
    },
    "279": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "ADD",
      "path": "16"
    },
    "280": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "281": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x100"
    },
    "284": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP2",
      "path": "16"
    },
    "285": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "ADD",
      "path": "16"
    },
    "286": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0xE0"
    },
    "288": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP3",
      "path": "16"
    },
    "289": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "ADD",
      "path": "16"
    },
    "290": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "291": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH5",
      "path": "16",
      "value": "0x100000000"
    },
    "297": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP2",
      "path": "16"
    },
    "298": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "GT",
      "path": "16"
    },
    "299": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "300": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x134"
    },
    "303": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "304": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "306": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP1",
      "path": "16"
    },
    "307": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "REVERT",
      "path": "16"
    },
    "308": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "309": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP3",
      "path": "16"
    },
    "310": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "ADD",
      "path": "16"
    },
    "311": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP4",
      "path": "16"
    },
    "312": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "314": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP3",
      "path": "16"
    },
    "315": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "ADD",
      "path": "16"
    },
    "316": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "GT",
      "path": "16"
    },
    "317": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "318": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x146"
    },
    "321": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "322": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "324": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP1",
      "path": "16"
    },
    "325": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "REVERT",
      "path": "16"
    },
    "326": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "327": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP1",
      "path": "16"
    },
    "328": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "329": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "330": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "332": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "ADD",
      "path": "16"
    },
    "333": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "334": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP5",
      "path": "16"
    },
    "335": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x1"
    },
    "337": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP4",
      "path": "16"
    },
    "338": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "MUL",
      "path": "16"
    },
    "339": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP5",
      "path": "16"
    },
    "340": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "ADD",
      "path": "16"
    },
    "341": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "GT",
      "path": "16"
    },
    "342": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH5",
      "path": "16",
      "value": "0x100000000"
    },
    "348": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP4",
      "path": "16"
    },
    "349": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "GT",
      "path": "16"
    },
    "350": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "OR",
      "path": "16"
    },
    "351": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "352": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x168"
    },
    "355": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "356": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "358": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "DUP1",
      "path": "16"
    },
    "359": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "REVERT",
      "path": "16"
    },
    "360": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "361": {
      "op": "POP"
    },
    "362": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "363": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "364": {
      "op": "POP"
    },
    "365": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "366": {
      "op": "POP"
    },
    "367": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x4A9"
    },
    "370": {
      "fn": "MockOracle.oracleRequest",
      "jump": "i",
      "offset": [
        2173,
        3035
      ],
      "op": "JUMP",
      "path": "16"
    },
    "371": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "372": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "STOP",
      "path": "16"
    },
    "373": {
      "offset": [
        575,
        622
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "374": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x17D"
    },
    "377": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x776"
    },
    "380": {
      "fn": "MockOracle.oracleRequest",
      "jump": "i",
      "offset": [
        575,
        622
      ],
      "op": "JUMP",
      "path": "16"
    },
    "381": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "382": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "384": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "DUP1",
      "path": "16"
    },
    "385": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "386": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "387": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "DUP3",
      "path": "16"
    },
    "388": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "389": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "390": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "391": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "DUP2",
      "path": "16"
    },
    "392": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "393": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "SUB",
      "path": "16"
    },
    "394": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "396": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "ADD",
      "path": "16"
    },
    "397": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "398": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        575,
        622
      ],
      "op": "RETURN",
      "path": "16"
    },
    "399": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "400": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x173"
    },
    "403": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "405": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "DUP1",
      "path": "16"
    },
    "406": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "CALLDATASIZE",
      "path": "16"
    },
    "407": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "SUB",
      "path": "16"
    },
    "408": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x80"
    },
    "410": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "DUP2",
      "path": "16"
    },
    "411": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "LT",
      "path": "16"
    },
    "412": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "413": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x1A5"
    },
    "416": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "417": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "419": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "DUP1",
      "path": "16"
    },
    "420": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "REVERT",
      "path": "16"
    },
    "421": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "422": {
      "op": "POP"
    },
    "423": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "DUP1",
      "path": "16"
    },
    "424": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "425": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "426": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "428": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "DUP2",
      "path": "16"
    },
    "429": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "ADD",
      "path": "16"
    },
    "430": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "431": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "432": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "434": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "436": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "438": {
      "op": "SHL"
    },
    "439": {
      "op": "SUB"
    },
    "440": {
      "op": "NOT"
    },
    "441": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "443": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "DUP3",
      "path": "16"
    },
    "444": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "ADD",
      "path": "16"
    },
    "445": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "446": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "AND",
      "path": "16"
    },
    "447": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "448": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x60"
    },
    "450": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "ADD",
      "path": "16"
    },
    "451": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "452": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x77C"
    },
    "455": {
      "fn": "MockOracle.cancelOracleRequest",
      "jump": "i",
      "offset": [
        4799,
        5280
      ],
      "op": "JUMP",
      "path": "16"
    },
    "456": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "457": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x173"
    },
    "460": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "462": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP1",
      "path": "2"
    },
    "463": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "464": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SUB",
      "path": "2"
    },
    "465": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "467": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP2",
      "path": "2"
    },
    "468": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "LT",
      "path": "2"
    },
    "469": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "470": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1DE"
    },
    "473": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "474": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "476": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP1",
      "path": "2"
    },
    "477": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "REVERT",
      "path": "2"
    },
    "478": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "479": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "481": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "483": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "485": {
      "op": "SHL"
    },
    "486": {
      "op": "SUB"
    },
    "487": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP3",
      "path": "2"
    },
    "488": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "489": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "AND",
      "path": "2"
    },
    "490": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "491": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "493": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP2",
      "path": "2"
    },
    "494": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "ADD",
      "path": "2"
    },
    "495": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "496": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "497": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP2",
      "path": "2"
    },
    "498": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "ADD",
      "path": "2"
    },
    "499": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "500": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "502": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP2",
      "path": "2"
    },
    "503": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "ADD",
      "path": "2"
    },
    "504": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "506": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP3",
      "path": "2"
    },
    "507": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "ADD",
      "path": "2"
    },
    "508": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "509": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH5",
      "path": "2",
      "value": "0x100000000"
    },
    "515": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP2",
      "path": "2"
    },
    "516": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "GT",
      "path": "2"
    },
    "517": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "518": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x20E"
    },
    "521": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "522": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "524": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP1",
      "path": "2"
    },
    "525": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "REVERT",
      "path": "2"
    },
    "526": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "527": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP3",
      "path": "2"
    },
    "528": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "ADD",
      "path": "2"
    },
    "529": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP4",
      "path": "2"
    },
    "530": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "532": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP3",
      "path": "2"
    },
    "533": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "ADD",
      "path": "2"
    },
    "534": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "GT",
      "path": "2"
    },
    "535": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "536": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x220"
    },
    "539": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "540": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "542": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP1",
      "path": "2"
    },
    "543": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "REVERT",
      "path": "2"
    },
    "544": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "545": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP1",
      "path": "2"
    },
    "546": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "547": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "548": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "550": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "ADD",
      "path": "2"
    },
    "551": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "552": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP5",
      "path": "2"
    },
    "553": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "555": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP4",
      "path": "2"
    },
    "556": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "MUL",
      "path": "2"
    },
    "557": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP5",
      "path": "2"
    },
    "558": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "ADD",
      "path": "2"
    },
    "559": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "GT",
      "path": "2"
    },
    "560": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH5",
      "path": "2",
      "value": "0x100000000"
    },
    "566": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP4",
      "path": "2"
    },
    "567": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "GT",
      "path": "2"
    },
    "568": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "OR",
      "path": "2"
    },
    "569": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "570": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x242"
    },
    "573": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "574": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "576": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP1",
      "path": "2"
    },
    "577": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "REVERT",
      "path": "2"
    },
    "578": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "579": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "580": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "581": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP1",
      "path": "2"
    },
    "582": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP1",
      "path": "2"
    },
    "583": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "585": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "ADD",
      "path": "2"
    },
    "586": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "588": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP1",
      "path": "2"
    },
    "589": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "590": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DIV",
      "path": "2"
    },
    "591": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "MUL",
      "path": "2"
    },
    "592": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "594": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "ADD",
      "path": "2"
    },
    "595": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "597": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "598": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "599": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP2",
      "path": "2"
    },
    "600": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "ADD",
      "path": "2"
    },
    "601": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "603": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "604": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP1",
      "path": "2"
    },
    "605": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "606": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "607": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "608": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "609": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP2",
      "path": "2"
    },
    "610": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP2",
      "path": "2"
    },
    "611": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "612": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "614": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "ADD",
      "path": "2"
    },
    "615": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP4",
      "path": "2"
    },
    "616": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP4",
      "path": "2"
    },
    "617": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP1",
      "path": "2"
    },
    "618": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP3",
      "path": "2"
    },
    "619": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "DUP5",
      "path": "2"
    },
    "620": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "CALLDATACOPY",
      "path": "2"
    },
    "621": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "623": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "624": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "ADD",
      "path": "2"
    },
    "625": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "626": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "627": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "628": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "629": {
      "op": "POP"
    },
    "630": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "631": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP6",
      "path": "2"
    },
    "632": {
      "op": "POP"
    },
    "633": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8FA"
    },
    "636": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "637": {
      "op": "POP"
    },
    "638": {
      "op": "POP"
    },
    "639": {
      "op": "POP"
    },
    "640": {
      "op": "POP"
    },
    "641": {
      "op": "POP"
    },
    "642": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "jump": "i",
      "offset": [
        718,
        1381
      ],
      "op": "JUMP",
      "path": "2"
    },
    "643": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "644": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5558,
        5565
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "646": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5590,
        5599
      ],
      "op": "SLOAD",
      "path": "16",
      "statement": 0
    },
    "647": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "649": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "651": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "653": {
      "op": "SHL"
    },
    "654": {
      "op": "SUB"
    },
    "655": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5590,
        5599
      ],
      "op": "AND",
      "path": "16"
    },
    "656": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5483,
        5605
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "657": {
      "fn": "MockOracle.getChainlinkToken",
      "jump": "o",
      "offset": [
        5483,
        5605
      ],
      "op": "JUMP",
      "path": "16"
    },
    "658": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "659": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3674,
        3678
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "661": {
      "offset": [
        5819,
        5842
      ],
      "op": "DUP3",
      "path": "16"
    },
    "662": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5819,
        5842
      ],
      "op": "DUP2",
      "path": "16"
    },
    "663": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5819,
        5842
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "664": {
      "offset": [
        5819,
        5830
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x1"
    },
    "666": {
      "offset": [
        5819,
        5842
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "668": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5819,
        5842
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "669": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5819,
        5842
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "671": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5819,
        5842
      ],
      "op": "DUP2",
      "path": "16"
    },
    "672": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5819,
        5842
      ],
      "op": "KECCAK256",
      "path": "16"
    },
    "673": {
      "offset": [
        5819,
        5855
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "674": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3649,
        3659
      ],
      "op": "DUP4",
      "path": "16"
    },
    "675": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3649,
        3659
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "676": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "678": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "680": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "682": {
      "op": "SHL"
    },
    "683": {
      "op": "SUB"
    },
    "684": {
      "offset": [
        5819,
        5855
      ],
      "op": "AND",
      "path": "16"
    },
    "685": {
      "offset": [
        5811,
        5901
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x2FD"
    },
    "688": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "689": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "691": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "DUP1",
      "path": "16"
    },
    "692": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "693": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "697": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "699": {
      "op": "SHL"
    },
    "700": {
      "offset": [
        5811,
        5901
      ],
      "op": "DUP2",
      "path": "16"
    },
    "701": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "702": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "704": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "706": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "DUP3",
      "path": "16"
    },
    "707": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "ADD",
      "path": "16"
    },
    "708": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "709": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x1B"
    },
    "711": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x24"
    },
    "713": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "DUP3",
      "path": "16"
    },
    "714": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "ADD",
      "path": "16"
    },
    "715": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "716": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "PUSH32",
      "path": "16",
      "value": "0x4D757374206861766520612076616C6964207265717565737449640000000000"
    },
    "749": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x44"
    },
    "751": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "DUP3",
      "path": "16"
    },
    "752": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "ADD",
      "path": "16"
    },
    "753": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "754": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "755": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "756": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "757": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "DUP2",
      "path": "16"
    },
    "758": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "759": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "SUB",
      "path": "16"
    },
    "760": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x64"
    },
    "762": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "ADD",
      "path": "16"
    },
    "763": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "764": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "REVERT",
      "path": "16"
    },
    "765": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5811,
        5901
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "766": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3706
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x305"
    },
    "769": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3706
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xB88"
    },
    "772": {
      "fn": "MockOracle.fulfillOracleRequest",
      "jump": "i",
      "offset": [
        3688,
        3706
      ],
      "op": "JUMP",
      "path": "16"
    },
    "773": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3706
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "774": {
      "op": "POP"
    },
    "775": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3709,
        3732
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "777": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3709,
        3732
      ],
      "op": "DUP5",
      "path": "16"
    },
    "778": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3709,
        3732
      ],
      "op": "DUP2",
      "path": "16"
    },
    "779": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3709,
        3732
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "780": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3709,
        3720
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x1"
    },
    "782": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3709,
        3732
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "784": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3709,
        3732
      ],
      "op": "DUP2",
      "path": "16"
    },
    "785": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3709,
        3732
      ],
      "op": "DUP2",
      "path": "16"
    },
    "786": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3709,
        3732
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "787": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3709,
        3732
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "789": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3709,
        3732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "790": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3709,
        3732
      ],
      "op": "DUP5",
      "path": "16"
    },
    "791": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3709,
        3732
      ],
      "op": "KECCAK256",
      "path": "16"
    },
    "792": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "DUP2",
      "path": "16"
    },
    "793": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "794": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "795": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "DUP4",
      "path": "16"
    },
    "796": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "ADD",
      "path": "16"
    },
    "797": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "798": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "799": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "800": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "801": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "802": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "804": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "806": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "808": {
      "op": "SHL"
    },
    "809": {
      "op": "SUB"
    },
    "810": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "DUP2",
      "path": "16"
    },
    "811": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "AND",
      "path": "16"
    },
    "812": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "DUP4",
      "path": "16"
    },
    "813": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "814": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "816": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "818": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "820": {
      "op": "SHL"
    },
    "821": {
      "op": "SUB"
    },
    "822": {
      "op": "NOT"
    },
    "823": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "825": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "827": {
      "op": "SHL"
    },
    "828": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "DUP3",
      "path": "16"
    },
    "829": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "DIV",
      "path": "16"
    },
    "830": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0xE0"
    },
    "832": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "SHL",
      "path": "16"
    },
    "833": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "AND",
      "path": "16"
    },
    "834": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "DUP4",
      "path": "16"
    },
    "835": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "DUP6",
      "path": "16"
    },
    "836": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "ADD",
      "path": "16"
    },
    "837": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3688,
        3732
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "838": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3745,
        3768
      ],
      "op": "SWAP5",
      "path": "16",
      "statement": 1
    },
    "839": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3745,
        3768
      ],
      "op": "DUP10",
      "path": "16"
    },
    "840": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3745,
        3768
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "841": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3745,
        3768
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "842": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3745,
        3768
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "843": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3745,
        3768
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "844": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3745,
        3768
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "845": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3745,
        3768
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "846": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "848": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "850": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "852": {
      "op": "SHL"
    },
    "853": {
      "op": "SUB"
    },
    "854": {
      "op": "NOT"
    },
    "855": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3738,
        3768
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "856": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3738,
        3768
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "857": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3738,
        3768
      ],
      "op": "AND",
      "path": "16"
    },
    "858": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3738,
        3768
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "859": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3738,
        3768
      ],
      "op": "SSTORE",
      "path": "16"
    },
    "860": {
      "offset": [
        680,
        686
      ],
      "op": "PUSH3",
      "path": "16",
      "value": "0x61A80"
    },
    "864": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3782,
        3791
      ],
      "op": "GAS",
      "path": "16",
      "statement": 2
    },
    "865": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3782,
        3821
      ],
      "op": "LT",
      "path": "16"
    },
    "866": {
      "branch": 14,
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3782,
        3821
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "867": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x3B3"
    },
    "870": {
      "branch": 14,
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "871": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "873": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "DUP1",
      "path": "16"
    },
    "874": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "875": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "879": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "881": {
      "op": "SHL"
    },
    "882": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "DUP2",
      "path": "16"
    },
    "883": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "884": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "886": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "888": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "DUP3",
      "path": "16"
    },
    "889": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "ADD",
      "path": "16"
    },
    "890": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "DUP2",
      "path": "16"
    },
    "891": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "892": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "893": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x24"
    },
    "895": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "DUP3",
      "path": "16"
    },
    "896": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "ADD",
      "path": "16"
    },
    "897": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "898": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "PUSH32",
      "path": "16",
      "value": "0x4D7573742070726F7669646520636F6E73756D657220656E6F75676820676173"
    },
    "931": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x44"
    },
    "933": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "DUP3",
      "path": "16"
    },
    "934": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "ADD",
      "path": "16"
    },
    "935": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "936": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "937": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "938": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "939": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "DUP2",
      "path": "16"
    },
    "940": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "941": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "SUB",
      "path": "16"
    },
    "942": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x64"
    },
    "944": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "ADD",
      "path": "16"
    },
    "945": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "946": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "REVERT",
      "path": "16"
    },
    "947": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3774,
        3858
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "948": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4158
      ],
      "op": "DUP1",
      "path": "16"
    },
    "949": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4158
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "950": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4187,
        4209
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "952": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4187,
        4209
      ],
      "op": "DUP1",
      "path": "16"
    },
    "953": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4187,
        4209
      ],
      "op": "DUP4",
      "path": "16"
    },
    "954": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4187,
        4209
      ],
      "op": "ADD",
      "path": "16"
    },
    "955": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4187,
        4209
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "956": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "958": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "DUP1",
      "path": "16"
    },
    "959": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "960": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x24"
    },
    "962": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "DUP2",
      "path": "16"
    },
    "963": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "ADD",
      "path": "16"
    },
    "964": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "DUP11",
      "path": "16"
    },
    "965": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "966": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "967": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x44"
    },
    "969": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "DUP1",
      "path": "16"
    },
    "970": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "DUP3",
      "path": "16"
    },
    "971": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "ADD",
      "path": "16"
    },
    "972": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "DUP11",
      "path": "16"
    },
    "973": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "974": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "975": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "DUP3",
      "path": "16"
    },
    "976": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "977": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "DUP1",
      "path": "16"
    },
    "978": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "DUP4",
      "path": "16"
    },
    "979": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "SUB",
      "path": "16"
    },
    "980": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "981": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "982": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "ADD",
      "path": "16"
    },
    "983": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "DUP2",
      "path": "16"
    },
    "984": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "985": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x64"
    },
    "987": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "988": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "989": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "ADD",
      "path": "16"
    },
    "990": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "DUP3",
      "path": "16"
    },
    "991": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "992": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "993": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "DUP4",
      "path": "16"
    },
    "994": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "ADD",
      "path": "16"
    },
    "995": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "DUP1",
      "path": "16"
    },
    "996": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "997": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "999": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1001": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1003": {
      "op": "SHL"
    },
    "1004": {
      "op": "SUB"
    },
    "1005": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "AND",
      "path": "16"
    },
    "1006": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1008": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1010": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1012": {
      "op": "SHL"
    },
    "1013": {
      "op": "SUB"
    },
    "1014": {
      "op": "NOT"
    },
    "1015": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1016": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "SWAP4",
      "path": "16"
    },
    "1017": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "AND",
      "path": "16"
    },
    "1018": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "1019": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1020": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "1021": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "OR",
      "path": "16"
    },
    "1022": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1023": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1024": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1025": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1026": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1027": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4124,
        4136
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1029": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4124,
        4136
      ],
      "op": "SWAP5",
      "path": "16"
    },
    "1030": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1032": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1034": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1036": {
      "op": "SHL"
    },
    "1037": {
      "op": "SUB"
    },
    "1038": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4163
      ],
      "op": "AND",
      "path": "16"
    },
    "1039": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4163
      ],
      "op": "SWAP4",
      "path": "16"
    },
    "1040": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "1041": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1042": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1043": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1044": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP4",
      "path": "16"
    },
    "1045": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4164,
        4229
      ],
      "op": "DUP4",
      "path": "16"
    },
    "1046": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1047": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1049": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP4",
      "path": "16"
    },
    "1050": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "LT",
      "path": "16"
    },
    "1051": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x435"
    },
    "1054": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "1055": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1056": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1057": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1058": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1059": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1061": {
      "op": "NOT"
    },
    "1062": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1063": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "1064": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "ADD",
      "path": "16"
    },
    "1065": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1066": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1068": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1069": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1070": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "ADD",
      "path": "16"
    },
    "1071": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1072": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "ADD",
      "path": "16"
    },
    "1073": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x416"
    },
    "1076": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "JUMP",
      "path": "16"
    },
    "1077": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1078": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x1"
    },
    "1080": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP4",
      "path": "16"
    },
    "1081": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1083": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "SUB",
      "path": "16"
    },
    "1084": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x100"
    },
    "1087": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "EXP",
      "path": "16"
    },
    "1088": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "SUB",
      "path": "16"
    },
    "1089": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1090": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "NOT",
      "path": "16"
    },
    "1091": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1092": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1093": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "AND",
      "path": "16"
    },
    "1094": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1095": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP5",
      "path": "16"
    },
    "1096": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1097": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "AND",
      "path": "16"
    },
    "1098": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1099": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1100": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "OR",
      "path": "16"
    },
    "1101": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP6",
      "path": "16"
    },
    "1102": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1103": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "POP",
      "path": "16"
    },
    "1104": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "POP",
      "path": "16"
    },
    "1105": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "POP",
      "path": "16"
    },
    "1106": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "POP",
      "path": "16"
    },
    "1107": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "POP",
      "path": "16"
    },
    "1108": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "POP",
      "path": "16"
    },
    "1109": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1110": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "POP",
      "path": "16"
    },
    "1111": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "ADD",
      "path": "16"
    },
    "1112": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1113": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "POP",
      "path": "16"
    },
    "1114": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "POP",
      "path": "16"
    },
    "1115": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1117": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1119": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1120": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1121": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP4",
      "path": "16"
    },
    "1122": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "SUB",
      "path": "16"
    },
    "1123": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1124": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1126": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP7",
      "path": "16"
    },
    "1127": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "GAS",
      "path": "16"
    },
    "1128": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "CALL",
      "path": "16"
    },
    "1129": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1130": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "POP",
      "path": "16"
    },
    "1131": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "POP",
      "path": "16"
    },
    "1132": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "RETURNDATASIZE",
      "path": "16"
    },
    "1133": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1134": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1136": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1137": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "EQ",
      "path": "16"
    },
    "1138": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x497"
    },
    "1141": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "1142": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1144": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1145": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1146": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "POP",
      "path": "16"
    },
    "1147": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x1F"
    },
    "1149": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "NOT",
      "path": "16"
    },
    "1150": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x3F"
    },
    "1152": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "RETURNDATASIZE",
      "path": "16"
    },
    "1153": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "ADD",
      "path": "16"
    },
    "1154": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "AND",
      "path": "16"
    },
    "1155": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1156": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "ADD",
      "path": "16"
    },
    "1157": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1159": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1160": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "RETURNDATASIZE",
      "path": "16"
    },
    "1161": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1162": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1163": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "RETURNDATASIZE",
      "path": "16"
    },
    "1164": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1166": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1168": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "DUP5",
      "path": "16"
    },
    "1169": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "ADD",
      "path": "16"
    },
    "1170": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "RETURNDATACOPY",
      "path": "16"
    },
    "1171": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x49C"
    },
    "1174": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "JUMP",
      "path": "16"
    },
    "1175": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1176": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x60"
    },
    "1178": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1179": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "POP",
      "path": "16"
    },
    "1180": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4230
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1181": {
      "op": "POP"
    },
    "1182": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4123,
        4230
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1183": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4123,
        4230
      ],
      "op": "SWAP8",
      "path": "16"
    },
    "1184": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3540,
        4301
      ],
      "op": "SWAP7",
      "path": "16"
    },
    "1185": {
      "op": "POP"
    },
    "1186": {
      "op": "POP"
    },
    "1187": {
      "op": "POP"
    },
    "1188": {
      "op": "POP"
    },
    "1189": {
      "op": "POP"
    },
    "1190": {
      "op": "POP"
    },
    "1191": {
      "op": "POP"
    },
    "1192": {
      "fn": "MockOracle.fulfillOracleRequest",
      "jump": "o",
      "offset": [
        3540,
        4301
      ],
      "op": "JUMP",
      "path": "16"
    },
    "1193": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1194": {
      "offset": [
        1566,
        1585
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4B1"
    },
    "1197": {
      "offset": [
        1566,
        1583
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x283"
    },
    "1200": {
      "jump": "i",
      "offset": [
        1566,
        1585
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1201": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1566,
        1585
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1202": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1204": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1206": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1208": {
      "op": "SHL"
    },
    "1209": {
      "op": "SUB"
    },
    "1210": {
      "offset": [
        1552,
        1585
      ],
      "op": "AND",
      "path": "2"
    },
    "1211": {
      "offset": [
        1552,
        1562
      ],
      "op": "CALLER",
      "path": "2"
    },
    "1212": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1214": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1216": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1218": {
      "op": "SHL"
    },
    "1219": {
      "op": "SUB"
    },
    "1220": {
      "offset": [
        1552,
        1585
      ],
      "op": "AND",
      "path": "2"
    },
    "1221": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1552,
        1585
      ],
      "op": "EQ",
      "path": "2"
    },
    "1222": {
      "offset": [
        1544,
        1609
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x50C"
    },
    "1225": {
      "offset": [
        1544,
        1609
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1226": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1228": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1229": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1230": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1234": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1236": {
      "op": "SHL"
    },
    "1237": {
      "offset": [
        1544,
        1609
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1238": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1239": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1241": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1243": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1244": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "ADD",
      "path": "2"
    },
    "1245": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1246": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x13"
    },
    "1248": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x24"
    },
    "1250": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1251": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "ADD",
      "path": "2"
    },
    "1252": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1253": {
      "op": "PUSH19",
      "value": "0x26BAB9BA103AB9B2902624A725903A37B5B2B7"
    },
    "1273": {
      "op": "PUSH1",
      "value": "0x69"
    },
    "1275": {
      "op": "SHL"
    },
    "1276": {
      "offset": [
        1544,
        1609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x44"
    },
    "1278": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1279": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "ADD",
      "path": "2"
    },
    "1280": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1281": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1282": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1283": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1284": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1285": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1286": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "SUB",
      "path": "2"
    },
    "1287": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x64"
    },
    "1289": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "ADD",
      "path": "2"
    },
    "1290": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1291": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "REVERT",
      "path": "2"
    },
    "1292": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1544,
        1609
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1293": {
      "offset": [
        6099,
        6108
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1295": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6099,
        6108
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "1296": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2464,
        2480
      ],
      "op": "DUP7",
      "path": "16"
    },
    "1297": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2464,
        2480
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1298": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1300": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1302": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1304": {
      "op": "SHL"
    },
    "1305": {
      "op": "SUB"
    },
    "1306": {
      "offset": [
        6084,
        6109
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1307": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6084,
        6109
      ],
      "op": "DUP4",
      "path": "16"
    },
    "1308": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6084,
        6109
      ],
      "op": "AND",
      "path": "16"
    },
    "1309": {
      "offset": [
        6099,
        6108
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1310": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6099,
        6108
      ],
      "op": "AND",
      "path": "16"
    },
    "1311": {
      "offset": [
        6084,
        6109
      ],
      "op": "EQ",
      "path": "16"
    },
    "1312": {
      "branch": 15,
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6084,
        6109
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "1313": {
      "offset": [
        6076,
        6137
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x571"
    },
    "1316": {
      "branch": 15,
      "offset": [
        6076,
        6137
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "1317": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1319": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1320": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1321": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1325": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1327": {
      "op": "SHL"
    },
    "1328": {
      "offset": [
        6076,
        6137
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1329": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1330": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1332": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "1334": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1335": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "ADD",
      "path": "16"
    },
    "1336": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1337": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x17"
    },
    "1339": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x24"
    },
    "1341": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1342": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "ADD",
      "path": "16"
    },
    "1343": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1344": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "PUSH32",
      "path": "16",
      "value": "0x43616E6E6F742063616C6C6261636B20746F204C494E4B000000000000000000"
    },
    "1377": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x44"
    },
    "1379": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1380": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "ADD",
      "path": "16"
    },
    "1381": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1382": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1383": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1384": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1385": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1386": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1387": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "SUB",
      "path": "16"
    },
    "1388": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x64"
    },
    "1390": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "ADD",
      "path": "16"
    },
    "1391": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1392": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "REVERT",
      "path": "16"
    },
    "1393": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6076,
        6137
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1394": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1396": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1397": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1398": {
      "op": "PUSH12",
      "value": "0xFFFFFFFFFFFFFFFFFFFFFFFF"
    },
    "1411": {
      "op": "NOT"
    },
    "1412": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x60"
    },
    "1414": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "DUP14",
      "path": "16"
    },
    "1415": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1416": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "SHL",
      "path": "16"
    },
    "1417": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "AND",
      "path": "16"
    },
    "1418": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1420": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1421": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "DUP4",
      "path": "16"
    },
    "1422": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "ADD",
      "path": "16"
    },
    "1423": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1424": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1425": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1426": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1427": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x34"
    },
    "1429": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1430": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "DUP4",
      "path": "16"
    },
    "1431": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "ADD",
      "path": "16"
    },
    "1432": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "DUP10",
      "path": "16"
    },
    "1433": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1434": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1435": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "DUP4",
      "path": "16"
    },
    "1436": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1437": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1438": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "DUP5",
      "path": "16"
    },
    "1439": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "SUB",
      "path": "16"
    },
    "1440": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1441": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1442": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "ADD",
      "path": "16"
    },
    "1443": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1444": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1445": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x54"
    },
    "1447": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1448": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "1449": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "ADD",
      "path": "16"
    },
    "1450": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "DUP4",
      "path": "16"
    },
    "1451": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2520,
        2553
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1452": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2510,
        2554
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1453": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2510,
        2554
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1454": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2510,
        2554
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1455": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2510,
        2554
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1456": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2510,
        2554
      ],
      "op": "ADD",
      "path": "16"
    },
    "1457": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2510,
        2554
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1458": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2510,
        2554
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1459": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2510,
        2554
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1460": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2510,
        2554
      ],
      "op": "KECCAK256",
      "path": "16"
    },
    "1461": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2490,
        2507
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1463": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2568,
        2590
      ],
      "op": "DUP2",
      "path": "16",
      "statement": 3
    },
    "1464": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2568,
        2590
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1465": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2568,
        2590
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1466": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2568,
        2579
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x1"
    },
    "1468": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2568,
        2590
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1469": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2568,
        2590
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "1470": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2568,
        2590
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1471": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2568,
        2590
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1472": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2568,
        2590
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1473": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2568,
        2590
      ],
      "op": "KECCAK256",
      "path": "16"
    },
    "1474": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2568,
        2603
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "1475": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1477": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1479": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1481": {
      "op": "SHL"
    },
    "1482": {
      "op": "SUB"
    },
    "1483": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2568,
        2603
      ],
      "op": "AND",
      "path": "16"
    },
    "1484": {
      "branch": 16,
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2568,
        2617
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "1485": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x614"
    },
    "1488": {
      "branch": 16,
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "1489": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1491": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1492": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1493": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1497": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1499": {
      "op": "SHL"
    },
    "1500": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1501": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1502": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1504": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "1506": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1507": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "ADD",
      "path": "16"
    },
    "1508": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1509": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x14"
    },
    "1511": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x24"
    },
    "1513": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1514": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "ADD",
      "path": "16"
    },
    "1515": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1516": {
      "op": "PUSH20",
      "value": "0x135D5CDD081D5CD94818481D5B9A5C5D59481251"
    },
    "1537": {
      "op": "PUSH1",
      "value": "0x62"
    },
    "1539": {
      "op": "SHL"
    },
    "1540": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x44"
    },
    "1542": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1543": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "ADD",
      "path": "16"
    },
    "1544": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1545": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1546": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1547": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1548": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1549": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1550": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "SUB",
      "path": "16"
    },
    "1551": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x64"
    },
    "1553": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "ADD",
      "path": "16"
    },
    "1554": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1555": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "REVERT",
      "path": "16"
    },
    "1556": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2560,
        2642
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1557": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2698,
        2716
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1559": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2719,
        2739
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x622"
    },
    "1562": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2719,
        2722
      ],
      "op": "TIMESTAMP",
      "path": "16"
    },
    "1563": {
      "offset": [
        613,
        622
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x12C"
    },
    "1566": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2719,
        2726
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xB27"
    },
    "1569": {
      "fn": "MockOracle.oracleRequest",
      "jump": "i",
      "offset": [
        2719,
        2739
      ],
      "op": "JUMP",
      "path": "16"
    },
    "1570": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2719,
        2739
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1571": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2698,
        2739
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1572": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2698,
        2739
      ],
      "op": "POP",
      "path": "16"
    },
    "1573": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "PUSH1",
      "path": "16",
      "statement": 4,
      "value": "0x40"
    },
    "1575": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1576": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1577": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1579": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "ADD",
      "path": "16"
    },
    "1580": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1582": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1583": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1584": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2788,
        2804
      ],
      "op": "DUP11",
      "path": "16"
    },
    "1585": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1587": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1589": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1591": {
      "op": "SHL"
    },
    "1592": {
      "op": "SUB"
    },
    "1593": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "AND",
      "path": "16"
    },
    "1594": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1595": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1596": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1598": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "ADD",
      "path": "16"
    },
    "1599": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2814,
        2833
      ],
      "op": "DUP10",
      "path": "16"
    },
    "1600": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1602": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1604": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1606": {
      "op": "SHL"
    },
    "1607": {
      "op": "SUB"
    },
    "1608": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "NOT",
      "path": "16"
    },
    "1609": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "AND",
      "path": "16"
    },
    "1610": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1611": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1612": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2771,
        2839
      ],
      "op": "POP",
      "path": "16"
    },
    "1613": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2757
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x1"
    },
    "1615": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2768
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1617": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2758,
        2767
      ],
      "op": "DUP5",
      "path": "16"
    },
    "1618": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2768
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1619": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2768
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1620": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2768
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1622": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2768
      ],
      "op": "ADD",
      "path": "16"
    },
    "1623": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2768
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1624": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2768
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1625": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2768
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1626": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2768
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1628": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2768
      ],
      "op": "ADD",
      "path": "16"
    },
    "1629": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2768
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1631": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2768
      ],
      "op": "KECCAK256",
      "path": "16"
    },
    "1632": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1634": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1635": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "ADD",
      "path": "16"
    },
    "1636": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1637": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1638": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1640": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "ADD",
      "path": "16"
    },
    "1641": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1643": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x100"
    },
    "1646": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "EXP",
      "path": "16"
    },
    "1647": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1648": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "1649": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1650": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1652": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1654": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1656": {
      "op": "SHL"
    },
    "1657": {
      "op": "SUB"
    },
    "1658": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "MUL",
      "path": "16"
    },
    "1659": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "NOT",
      "path": "16"
    },
    "1660": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "AND",
      "path": "16"
    },
    "1661": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1662": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "DUP4",
      "path": "16"
    },
    "1663": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1665": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1667": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1669": {
      "op": "SHL"
    },
    "1670": {
      "op": "SUB"
    },
    "1671": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "AND",
      "path": "16"
    },
    "1672": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "MUL",
      "path": "16"
    },
    "1673": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "OR",
      "path": "16"
    },
    "1674": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1675": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "SSTORE",
      "path": "16"
    },
    "1676": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "POP",
      "path": "16"
    },
    "1677": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1679": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1680": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "ADD",
      "path": "16"
    },
    "1681": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1682": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1683": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1685": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "ADD",
      "path": "16"
    },
    "1686": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x14"
    },
    "1688": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x100"
    },
    "1691": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "EXP",
      "path": "16"
    },
    "1692": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1693": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "1694": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1695": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0xFFFFFFFF"
    },
    "1700": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "MUL",
      "path": "16"
    },
    "1701": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "NOT",
      "path": "16"
    },
    "1702": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "AND",
      "path": "16"
    },
    "1703": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1704": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "DUP4",
      "path": "16"
    },
    "1705": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0xE0"
    },
    "1707": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "SHR",
      "path": "16"
    },
    "1708": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "MUL",
      "path": "16"
    },
    "1709": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "OR",
      "path": "16"
    },
    "1710": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1711": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "SSTORE",
      "path": "16"
    },
    "1712": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "POP",
      "path": "16"
    },
    "1713": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1714": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "POP",
      "path": "16"
    },
    "1715": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2746,
        2839
      ],
      "op": "POP",
      "path": "16"
    },
    "1716": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2872,
        2879
      ],
      "op": "DUP10",
      "path": "16",
      "statement": 5
    },
    "1717": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "PUSH32",
      "path": "16",
      "value": "0xD8D7ECC4800D25FA53CE0372F13A416D98907A7EF3D8D3BDD79CF4FE75529C65"
    },
    "1750": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2887,
        2894
      ],
      "op": "DUP14",
      "path": "16"
    },
    "1751": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2902,
        2911
      ],
      "op": "DUP5",
      "path": "16"
    },
    "1752": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2919,
        2927
      ],
      "op": "DUP15",
      "path": "16"
    },
    "1753": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2935,
        2951
      ],
      "op": "DUP14",
      "path": "16"
    },
    "1754": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2959,
        2978
      ],
      "op": "DUP14",
      "path": "16"
    },
    "1755": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2986,
        2996
      ],
      "op": "DUP8",
      "path": "16"
    },
    "1756": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        3004,
        3016
      ],
      "op": "DUP14",
      "path": "16"
    },
    "1757": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        3024,
        3029
      ],
      "op": "DUP14",
      "path": "16"
    },
    "1758": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        3024,
        3029
      ],
      "op": "DUP14",
      "path": "16"
    },
    "1759": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1761": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1762": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1763": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP11",
      "path": "16"
    },
    "1764": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1766": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1768": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1770": {
      "op": "SHL"
    },
    "1771": {
      "op": "SUB"
    },
    "1772": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "AND",
      "path": "16"
    },
    "1773": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1774": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1775": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1777": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "ADD",
      "path": "16"
    },
    "1778": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP10",
      "path": "16"
    },
    "1779": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1780": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1781": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1783": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "ADD",
      "path": "16"
    },
    "1784": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP9",
      "path": "16"
    },
    "1785": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1786": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1787": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1789": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "ADD",
      "path": "16"
    },
    "1790": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP8",
      "path": "16"
    },
    "1791": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1793": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1795": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1797": {
      "op": "SHL"
    },
    "1798": {
      "op": "SUB"
    },
    "1799": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "AND",
      "path": "16"
    },
    "1800": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1801": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1802": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1804": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "ADD",
      "path": "16"
    },
    "1805": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP7",
      "path": "16"
    },
    "1806": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1808": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1810": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1812": {
      "op": "SHL"
    },
    "1813": {
      "op": "SUB"
    },
    "1814": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "NOT",
      "path": "16"
    },
    "1815": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "AND",
      "path": "16"
    },
    "1816": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1817": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1818": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1820": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "ADD",
      "path": "16"
    },
    "1821": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP6",
      "path": "16"
    },
    "1822": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1823": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1824": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1826": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "ADD",
      "path": "16"
    },
    "1827": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP5",
      "path": "16"
    },
    "1828": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1829": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1830": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1832": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "ADD",
      "path": "16"
    },
    "1833": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1834": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1836": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "ADD",
      "path": "16"
    },
    "1837": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1838": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1839": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "SUB",
      "path": "16"
    },
    "1840": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1841": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1842": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP5",
      "path": "16"
    },
    "1843": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP5",
      "path": "16"
    },
    "1844": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1845": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1846": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1847": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1848": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1850": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "ADD",
      "path": "16"
    },
    "1851": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "1852": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "POP",
      "path": "16"
    },
    "1853": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1854": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1855": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP5",
      "path": "16"
    },
    "1856": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "CALLDATACOPY",
      "path": "16"
    },
    "1857": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1859": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP4",
      "path": "16"
    },
    "1860": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1861": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "ADD",
      "path": "16"
    },
    "1862": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1863": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1865": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1866": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x1F"
    },
    "1868": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1869": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1870": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "ADD",
      "path": "16"
    },
    "1871": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1873": {
      "op": "NOT"
    },
    "1874": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "AND",
      "path": "16"
    },
    "1875": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1876": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "1877": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "ADD",
      "path": "16"
    },
    "1878": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1879": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1880": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "SUB",
      "path": "16"
    },
    "1881": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "SWAP13",
      "path": "16"
    },
    "1882": {
      "op": "POP"
    },
    "1883": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1884": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "SWAP11",
      "path": "16"
    },
    "1885": {
      "op": "POP"
    },
    "1886": {
      "op": "POP"
    },
    "1887": {
      "op": "POP"
    },
    "1888": {
      "op": "POP"
    },
    "1889": {
      "op": "POP"
    },
    "1890": {
      "op": "POP"
    },
    "1891": {
      "op": "POP"
    },
    "1892": {
      "op": "POP"
    },
    "1893": {
      "op": "POP"
    },
    "1894": {
      "op": "POP"
    },
    "1895": {
      "op": "POP"
    },
    "1896": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2851,
        3030
      ],
      "op": "LOG2",
      "path": "16"
    },
    "1897": {
      "offset": [
        6143,
        6144
      ],
      "op": "POP",
      "path": "16"
    },
    "1898": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6143,
        6144
      ],
      "op": "POP",
      "path": "16"
    },
    "1899": {
      "offset": [
        1615,
        1616
      ],
      "op": "POP",
      "path": "2"
    },
    "1900": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "POP",
      "path": "16"
    },
    "1901": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "POP",
      "path": "16"
    },
    "1902": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "POP",
      "path": "16"
    },
    "1903": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "POP",
      "path": "16"
    },
    "1904": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "POP",
      "path": "16"
    },
    "1905": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "POP",
      "path": "16"
    },
    "1906": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "POP",
      "path": "16"
    },
    "1907": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "POP",
      "path": "16"
    },
    "1908": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2173,
        3035
      ],
      "op": "POP",
      "path": "16"
    },
    "1909": {
      "fn": "MockOracle.oracleRequest",
      "jump": "o",
      "offset": [
        2173,
        3035
      ],
      "op": "JUMP",
      "path": "16"
    },
    "1910": {
      "offset": [
        575,
        622
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1911": {
      "offset": [
        613,
        622
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x12C"
    },
    "1914": {
      "offset": [
        575,
        622
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1915": {
      "fn": "MockOracle.oracleRequest",
      "jump": "o",
      "offset": [
        575,
        622
      ],
      "op": "JUMP",
      "path": "16"
    },
    "1916": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1917": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5005,
        5006
      ],
      "op": "PUSH1",
      "path": "16",
      "statement": 6,
      "value": "0x0"
    },
    "1919": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4957,
        4980
      ],
      "op": "DUP5",
      "path": "16"
    },
    "1920": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4957,
        4980
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1921": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4957,
        4980
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1922": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4957,
        4968
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x1"
    },
    "1924": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4957,
        4980
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1926": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4957,
        4980
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1927": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4957,
        4980
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1929": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4957,
        4980
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1930": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4957,
        4980
      ],
      "op": "KECCAK256",
      "path": "16"
    },
    "1931": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4957,
        4993
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "1932": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1934": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1936": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1938": {
      "op": "SHL"
    },
    "1939": {
      "op": "SUB"
    },
    "1940": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4957,
        4993
      ],
      "op": "AND",
      "path": "16"
    },
    "1941": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x7DC"
    },
    "1944": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "1945": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1947": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1948": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1949": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1953": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1955": {
      "op": "SHL"
    },
    "1956": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1957": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1958": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1960": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "1962": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1963": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "ADD",
      "path": "16"
    },
    "1964": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1965": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x14"
    },
    "1967": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x24"
    },
    "1969": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1970": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "ADD",
      "path": "16"
    },
    "1971": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1972": {
      "op": "PUSH20",
      "value": "0x135D5CDD081D5CD94818481D5B9A5C5D59481251"
    },
    "1993": {
      "op": "PUSH1",
      "value": "0x62"
    },
    "1995": {
      "op": "SHL"
    },
    "1996": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x44"
    },
    "1998": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1999": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "ADD",
      "path": "16"
    },
    "2000": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "2001": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2002": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "2003": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2004": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "DUP2",
      "path": "16"
    },
    "2005": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2006": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "SUB",
      "path": "16"
    },
    "2007": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x64"
    },
    "2009": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "ADD",
      "path": "16"
    },
    "2010": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2011": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "REVERT",
      "path": "16"
    },
    "2012": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4949,
        5032
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2013": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5111,
        5114
      ],
      "op": "TIMESTAMP",
      "path": "16",
      "statement": 7
    },
    "2014": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5096,
        5107
      ],
      "op": "DUP2",
      "path": "16"
    },
    "2015": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5096,
        5114
      ],
      "op": "GT",
      "path": "16"
    },
    "2016": {
      "branch": 17,
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5096,
        5114
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "2017": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x82A"
    },
    "2020": {
      "branch": 17,
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "2021": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "2023": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2024": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "2025": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2029": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2031": {
      "op": "SHL"
    },
    "2032": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "DUP2",
      "path": "16"
    },
    "2033": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "2034": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "2036": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "2038": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "DUP3",
      "path": "16"
    },
    "2039": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "ADD",
      "path": "16"
    },
    "2040": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "2041": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x16"
    },
    "2043": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x24"
    },
    "2045": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "DUP3",
      "path": "16"
    },
    "2046": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "ADD",
      "path": "16"
    },
    "2047": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "2048": {
      "op": "PUSH22",
      "value": "0x14995C5D595CDD081A5CC81B9BDD08195E1C1A5C9959"
    },
    "2071": {
      "op": "PUSH1",
      "value": "0x52"
    },
    "2073": {
      "op": "SHL"
    },
    "2074": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x44"
    },
    "2076": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "DUP3",
      "path": "16"
    },
    "2077": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "ADD",
      "path": "16"
    },
    "2078": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "2079": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2080": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "2081": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2082": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "DUP2",
      "path": "16"
    },
    "2083": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2084": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "SUB",
      "path": "16"
    },
    "2085": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x64"
    },
    "2087": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "ADD",
      "path": "16"
    },
    "2088": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2089": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "REVERT",
      "path": "16"
    },
    "2090": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5088,
        5141
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2091": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5155,
        5178
      ],
      "op": "PUSH1",
      "path": "16",
      "statement": 8,
      "value": "0x0"
    },
    "2093": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5155,
        5178
      ],
      "op": "DUP5",
      "path": "16"
    },
    "2094": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5155,
        5178
      ],
      "op": "DUP2",
      "path": "16"
    },
    "2095": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5155,
        5178
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "2096": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5155,
        5166
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x1"
    },
    "2098": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5155,
        5178
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "2100": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5155,
        5178
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "2101": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5155,
        5178
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "2103": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5155,
        5178
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2104": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5155,
        5178
      ],
      "op": "DUP3",
      "path": "16"
    },
    "2105": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5155,
        5178
      ],
      "op": "KECCAK256",
      "path": "16"
    },
    "2106": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5148,
        5178
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2107": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5148,
        5178
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "2108": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2110": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2112": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2114": {
      "op": "SHL"
    },
    "2115": {
      "op": "SUB"
    },
    "2116": {
      "op": "NOT"
    },
    "2117": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5148,
        5178
      ],
      "op": "AND",
      "path": "16"
    },
    "2118": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5148,
        5178
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2119": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5148,
        5178
      ],
      "op": "SSTORE",
      "path": "16"
    },
    "2120": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5189,
        5220
      ],
      "op": "MLOAD",
      "path": "16",
      "statement": 9
    },
    "2121": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5167,
        5177
      ],
      "op": "DUP6",
      "path": "16"
    },
    "2122": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5167,
        5177
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "2123": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5189,
        5220
      ],
      "op": "PUSH32",
      "path": "16",
      "value": "0xA7842B9EC549398102C0D91B1B9919B2F20558AEFDADF57528A95C6CD3292E93"
    },
    "2156": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5189,
        5220
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "2157": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5189,
        5220
      ],
      "op": "LOG2",
      "path": "16"
    },
    "2158": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5243
      ],
      "op": "PUSH1",
      "path": "16",
      "statement": 10,
      "value": "0x0"
    },
    "2160": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5243
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2161": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5243
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "2162": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "2164": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2165": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "2166": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "2171": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2173": {
      "op": "SHL"
    },
    "2174": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "DUP2",
      "path": "16"
    },
    "2175": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "2176": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5253,
        5263
      ],
      "op": "CALLER",
      "path": "16"
    },
    "2177": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "2179": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "DUP3",
      "path": "16"
    },
    "2180": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "ADD",
      "path": "16"
    },
    "2181": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "2182": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x24"
    },
    "2184": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "DUP2",
      "path": "16"
    },
    "2185": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "ADD",
      "path": "16"
    },
    "2186": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "DUP8",
      "path": "16"
    },
    "2187": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2188": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "2189": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2190": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "2191": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2193": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2195": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2197": {
      "op": "SHL"
    },
    "2198": {
      "op": "SUB"
    },
    "2199": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5243
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2200": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5243
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "2201": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5243
      ],
      "op": "AND",
      "path": "16"
    },
    "2202": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5243
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "2203": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5252
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0xA9059CBB"
    },
    "2208": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5252
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "2209": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x44"
    },
    "2211": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2212": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "DUP5",
      "path": "16"
    },
    "2213": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "ADD",
      "path": "16"
    },
    "2214": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "SWAP4",
      "path": "16"
    },
    "2215": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "2217": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "SWAP4",
      "path": "16"
    },
    "2218": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2219": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "DUP4",
      "path": "16"
    },
    "2220": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2221": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "SUB",
      "path": "16"
    },
    "2222": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2223": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "2224": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "ADD",
      "path": "16"
    },
    "2225": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2226": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "DUP3",
      "path": "16"
    },
    "2227": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2228": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5243
      ],
      "op": "DUP8",
      "path": "16"
    },
    "2229": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2230": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "EXTCODESIZE",
      "path": "16"
    },
    "2231": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "2232": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2233": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "2234": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x8C2"
    },
    "2237": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "2238": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "2240": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2241": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "REVERT",
      "path": "16"
    },
    "2242": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2243": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "POP",
      "path": "16"
    },
    "2244": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "GAS",
      "path": "16"
    },
    "2245": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "CALL",
      "path": "16"
    },
    "2246": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "2247": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2248": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "2249": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x8D6"
    },
    "2252": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "2253": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "RETURNDATASIZE",
      "path": "16"
    },
    "2254": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "2256": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2257": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "RETURNDATACOPY",
      "path": "16"
    },
    "2258": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "RETURNDATASIZE",
      "path": "16"
    },
    "2259": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "2261": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "REVERT",
      "path": "16"
    },
    "2262": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2263": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "POP",
      "path": "16"
    },
    "2264": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "POP",
      "path": "16"
    },
    "2265": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "POP",
      "path": "16"
    },
    "2266": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "POP",
      "path": "16"
    },
    "2267": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "2269": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "2270": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "RETURNDATASIZE",
      "path": "16"
    },
    "2271": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "2273": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "DUP2",
      "path": "16"
    },
    "2274": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "LT",
      "path": "16"
    },
    "2275": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "2276": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x8EC"
    },
    "2279": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "2280": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "2282": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2283": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "REVERT",
      "path": "16"
    },
    "2284": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2285": {
      "op": "POP"
    },
    "2286": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5234,
        5274
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "2287": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5227,
        5275
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x8F4"
    },
    "2290": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5227,
        5275
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "2291": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5227,
        5275
      ],
      "op": "INVALID",
      "path": "16"
    },
    "2292": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5227,
        5275
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2293": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "POP",
      "path": "16"
    },
    "2294": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "POP",
      "path": "16"
    },
    "2295": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "POP",
      "path": "16"
    },
    "2296": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4799,
        5280
      ],
      "op": "POP",
      "path": "16"
    },
    "2297": {
      "fn": "MockOracle.cancelOracleRequest",
      "jump": "o",
      "offset": [
        4799,
        5280
      ],
      "op": "JUMP",
      "path": "16"
    },
    "2298": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2299": {
      "offset": [
        1566,
        1585
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x902"
    },
    "2302": {
      "offset": [
        1566,
        1583
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x283"
    },
    "2305": {
      "jump": "i",
      "offset": [
        1566,
        1585
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2306": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1566,
        1585
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2307": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2309": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2311": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2313": {
      "op": "SHL"
    },
    "2314": {
      "op": "SUB"
    },
    "2315": {
      "offset": [
        1552,
        1585
      ],
      "op": "AND",
      "path": "2"
    },
    "2316": {
      "offset": [
        1552,
        1562
      ],
      "op": "CALLER",
      "path": "2"
    },
    "2317": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2319": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2321": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2323": {
      "op": "SHL"
    },
    "2324": {
      "op": "SUB"
    },
    "2325": {
      "offset": [
        1552,
        1585
      ],
      "op": "AND",
      "path": "2"
    },
    "2326": {
      "branch": 18,
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1552,
        1585
      ],
      "op": "EQ",
      "path": "2"
    },
    "2327": {
      "offset": [
        1544,
        1609
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x95D"
    },
    "2330": {
      "branch": 18,
      "offset": [
        1544,
        1609
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2331": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2333": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2334": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2335": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2339": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2341": {
      "op": "SHL"
    },
    "2342": {
      "offset": [
        1544,
        1609
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2343": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2344": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2346": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2348": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2349": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "ADD",
      "path": "2"
    },
    "2350": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2351": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x13"
    },
    "2353": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x24"
    },
    "2355": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2356": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "ADD",
      "path": "2"
    },
    "2357": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2358": {
      "op": "PUSH19",
      "value": "0x26BAB9BA103AB9B2902624A725903A37B5B2B7"
    },
    "2378": {
      "op": "PUSH1",
      "value": "0x69"
    },
    "2380": {
      "op": "SHL"
    },
    "2381": {
      "offset": [
        1544,
        1609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x44"
    },
    "2383": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2384": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "ADD",
      "path": "2"
    },
    "2385": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2386": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2387": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2388": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2389": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2390": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2391": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "SUB",
      "path": "2"
    },
    "2392": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x64"
    },
    "2394": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "ADD",
      "path": "2"
    },
    "2395": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2396": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2397": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1544,
        1609
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2398": {
      "offset": [
        2278,
        2290
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2399": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2278,
        2290
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2400": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        860,
        865
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2401": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        860,
        865
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2402": {
      "offset": [
        283,
        330
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x44"
    },
    "2404": {
      "op": "GT"
    },
    "2405": {
      "offset": [
        2278,
        2316
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2406": {
      "offset": [
        2270,
        2343
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9AF"
    },
    "2409": {
      "offset": [
        2270,
        2343
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2410": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2412": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2413": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2414": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2418": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2420": {
      "op": "SHL"
    },
    "2421": {
      "offset": [
        2270,
        2343
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2422": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2423": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2425": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2427": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2428": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "ADD",
      "path": "2"
    },
    "2429": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2430": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x16"
    },
    "2432": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x24"
    },
    "2434": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2435": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "ADD",
      "path": "2"
    },
    "2436": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2437": {
      "op": "PUSH22",
      "value": "0x92DCECC2D8D2C840E4CAE2EACAE6E840D8CADCCEE8D"
    },
    "2460": {
      "op": "PUSH1",
      "value": "0x53"
    },
    "2462": {
      "op": "SHL"
    },
    "2463": {
      "offset": [
        2270,
        2343
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x44"
    },
    "2465": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2466": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "ADD",
      "path": "2"
    },
    "2467": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2468": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2469": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2470": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2471": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2472": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2473": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "SUB",
      "path": "2"
    },
    "2474": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x64"
    },
    "2476": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "ADD",
      "path": "2"
    },
    "2477": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2478": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2479": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2270,
        2343
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2480": {
      "offset": [
        1974,
        1976
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2482": {
      "offset": [
        1963,
        1977
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2483": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1963,
        1977
      ],
      "op": "ADD",
      "path": "2"
    },
    "2484": {
      "offset": [
        1957,
        1978
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2485": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        897,
        902
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2486": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        897,
        902
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2487": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2489": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2491": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2493": {
      "op": "SHL"
    },
    "2494": {
      "op": "SUB"
    },
    "2495": {
      "op": "NOT"
    },
    "2496": {
      "offset": [
        1997,
        2036
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2497": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1997,
        2036
      ],
      "op": "AND",
      "path": "2"
    },
    "2498": {
      "op": "PUSH4",
      "value": "0x20214CA3"
    },
    "2503": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "2505": {
      "op": "SHL"
    },
    "2506": {
      "offset": [
        1997,
        2036
      ],
      "op": "EQ",
      "path": "2"
    },
    "2507": {
      "offset": [
        1989,
        2071
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA1B"
    },
    "2510": {
      "offset": [
        1989,
        2071
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2511": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2513": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2514": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2515": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2519": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2521": {
      "op": "SHL"
    },
    "2522": {
      "offset": [
        1989,
        2071
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2523": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2524": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2526": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2528": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2529": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "ADD",
      "path": "2"
    },
    "2530": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2531": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1E"
    },
    "2533": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x24"
    },
    "2535": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2536": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "ADD",
      "path": "2"
    },
    "2537": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2538": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x4D757374207573652077686974656C69737465642066756E6374696F6E730000"
    },
    "2571": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x44"
    },
    "2573": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2574": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "ADD",
      "path": "2"
    },
    "2575": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2576": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2577": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2578": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2579": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2580": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2581": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "SUB",
      "path": "2"
    },
    "2582": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x64"
    },
    "2584": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "ADD",
      "path": "2"
    },
    "2585": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2586": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2587": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1989,
        2071
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2588": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1009,
        1016
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2589": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1004,
        1006
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x24"
    },
    "2591": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        997,
        1002
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2592": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        993,
        1007
      ],
      "op": "ADD",
      "path": "2"
    },
    "2593": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        986,
        1017
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2594": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1139,
        1146
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2595": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1134,
        1136
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x44"
    },
    "2597": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1127,
        1132
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2598": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1123,
        1137
      ],
      "op": "ADD",
      "path": "2"
    },
    "2599": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1116,
        1147
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2600": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1252,
        1264
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2602": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1278,
        1282
      ],
      "op": "ADDRESS",
      "path": "2"
    },
    "2603": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2605": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2607": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2609": {
      "op": "SHL"
    },
    "2610": {
      "op": "SUB"
    },
    "2611": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1296
      ],
      "op": "AND",
      "path": "2"
    },
    "2612": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1297,
        1302
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2613": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2615": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2616": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2617": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2618": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2619": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2620": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2621": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2623": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "ADD",
      "path": "2"
    },
    "2624": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2625": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2626": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2627": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2628": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2629": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2631": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2632": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "LT",
      "path": "2"
    },
    "2633": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA63"
    },
    "2636": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2637": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2638": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2639": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2640": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2641": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2643": {
      "op": "NOT"
    },
    "2644": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2645": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2646": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "ADD",
      "path": "2"
    },
    "2647": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2648": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2650": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2651": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2652": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "ADD",
      "path": "2"
    },
    "2653": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2654": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "ADD",
      "path": "2"
    },
    "2655": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA44"
    },
    "2658": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2659": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2660": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2662": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2663": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2665": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "SUB",
      "path": "2"
    },
    "2666": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x100"
    },
    "2669": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "EXP",
      "path": "2"
    },
    "2670": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "SUB",
      "path": "2"
    },
    "2671": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2672": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "NOT",
      "path": "2"
    },
    "2673": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2674": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2675": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "AND",
      "path": "2"
    },
    "2676": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2677": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2678": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2679": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "AND",
      "path": "2"
    },
    "2680": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2681": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2682": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "OR",
      "path": "2"
    },
    "2683": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2684": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2685": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "POP",
      "path": "2"
    },
    "2686": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "POP",
      "path": "2"
    },
    "2687": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "POP",
      "path": "2"
    },
    "2688": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "POP",
      "path": "2"
    },
    "2689": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "POP",
      "path": "2"
    },
    "2690": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "POP",
      "path": "2"
    },
    "2691": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2692": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "POP",
      "path": "2"
    },
    "2693": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "ADD",
      "path": "2"
    },
    "2694": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2695": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "POP",
      "path": "2"
    },
    "2696": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "POP",
      "path": "2"
    },
    "2697": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2699": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2701": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2702": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2703": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2704": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "SUB",
      "path": "2"
    },
    "2705": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2706": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2707": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "GAS",
      "path": "2"
    },
    "2708": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DELEGATECALL",
      "path": "2"
    },
    "2709": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2710": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "POP",
      "path": "2"
    },
    "2711": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "POP",
      "path": "2"
    },
    "2712": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2713": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2714": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2716": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2717": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "EQ",
      "path": "2"
    },
    "2718": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xAC3"
    },
    "2721": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2722": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2724": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2725": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2726": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "POP",
      "path": "2"
    },
    "2727": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "2729": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "NOT",
      "path": "2"
    },
    "2730": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3F"
    },
    "2732": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2733": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "ADD",
      "path": "2"
    },
    "2734": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "AND",
      "path": "2"
    },
    "2735": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2736": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "ADD",
      "path": "2"
    },
    "2737": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2739": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2740": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2741": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2742": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2743": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2744": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2746": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2748": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2749": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "ADD",
      "path": "2"
    },
    "2750": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "2751": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xAC8"
    },
    "2754": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2755": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2756": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "2758": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2759": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "POP",
      "path": "2"
    },
    "2760": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2761": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1270,
        1303
      ],
      "op": "POP",
      "path": "2"
    },
    "2762": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1251,
        1303
      ],
      "op": "POP",
      "path": "2"
    },
    "2763": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1251,
        1303
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2764": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1251,
        1303
      ],
      "op": "POP",
      "path": "2"
    },
    "2765": {
      "branch": 19,
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1340,
        1347
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 11
    },
    "2766": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB1E"
    },
    "2769": {
      "branch": 19,
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2770": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2772": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2773": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2774": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2778": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2780": {
      "op": "SHL"
    },
    "2781": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2782": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2783": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2785": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2787": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2788": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "ADD",
      "path": "2"
    },
    "2789": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2790": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x18"
    },
    "2792": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x24"
    },
    "2794": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2795": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "ADD",
      "path": "2"
    },
    "2796": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2797": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x556E61626C6520746F2063726561746520726571756573740000000000000000"
    },
    "2830": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x44"
    },
    "2832": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2833": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "ADD",
      "path": "2"
    },
    "2834": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2835": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2836": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2837": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2838": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2839": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2840": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "SUB",
      "path": "2"
    },
    "2841": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x64"
    },
    "2843": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "ADD",
      "path": "2"
    },
    "2844": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2845": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2846": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1332,
        1376
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2847": {
      "offset": [
        2077,
        2078
      ],
      "op": "POP",
      "path": "2"
    },
    "2848": {
      "offset": [
        2349,
        2350
      ],
      "op": "POP",
      "path": "2"
    },
    "2849": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2349,
        2350
      ],
      "op": "POP",
      "path": "2"
    },
    "2850": {
      "offset": [
        1615,
        1616
      ],
      "op": "POP",
      "path": "2"
    },
    "2851": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "POP",
      "path": "2"
    },
    "2852": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "POP",
      "path": "2"
    },
    "2853": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        718,
        1381
      ],
      "op": "POP",
      "path": "2"
    },
    "2854": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "jump": "o",
      "offset": [
        718,
        1381
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2855": {
      "fn": "SafeMath.add",
      "offset": [
        822,
        984
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2856": {
      "fn": "SafeMath.add",
      "offset": [
        880,
        887
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "2858": {
      "fn": "SafeMath.add",
      "offset": [
        907,
        912
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2859": {
      "fn": "SafeMath.add",
      "offset": [
        907,
        912
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2860": {
      "fn": "SafeMath.add",
      "offset": [
        907,
        912
      ],
      "op": "ADD",
      "path": "13"
    },
    "2861": {
      "fn": "SafeMath.add",
      "offset": [
        926,
        932
      ],
      "op": "DUP4",
      "path": "13",
      "statement": 12
    },
    "2862": {
      "fn": "SafeMath.add",
      "offset": [
        926,
        932
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2863": {
      "fn": "SafeMath.add",
      "offset": [
        926,
        932
      ],
      "op": "LT",
      "path": "13"
    },
    "2864": {
      "branch": 20,
      "fn": "SafeMath.add",
      "offset": [
        926,
        932
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "2865": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xB81"
    },
    "2868": {
      "branch": 20,
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "2869": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2871": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2872": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2873": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2877": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2879": {
      "op": "SHL"
    },
    "2880": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2881": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2882": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2884": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "2886": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2887": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "ADD",
      "path": "13"
    },
    "2888": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2889": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1B"
    },
    "2891": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x24"
    },
    "2893": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2894": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "ADD",
      "path": "13"
    },
    "2895": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2896": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "PUSH32",
      "path": "13",
      "value": "0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
    },
    "2929": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x44"
    },
    "2931": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2932": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "ADD",
      "path": "13"
    },
    "2933": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2934": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2935": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2936": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2937": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2938": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2939": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "SUB",
      "path": "13"
    },
    "2940": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x64"
    },
    "2942": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "ADD",
      "path": "13"
    },
    "2943": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2944": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "REVERT",
      "path": "13"
    },
    "2945": {
      "fn": "SafeMath.add",
      "offset": [
        918,
        964
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2946": {
      "fn": "SafeMath.add",
      "offset": [
        978,
        979
      ],
      "op": "SWAP4",
      "path": "13",
      "statement": 13
    },
    "2947": {
      "fn": "SafeMath.add",
      "offset": [
        822,
        984
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "2948": {
      "op": "POP"
    },
    "2949": {
      "op": "POP"
    },
    "2950": {
      "op": "POP"
    },
    "2951": {
      "fn": "SafeMath.add",
      "jump": "o",
      "offset": [
        822,
        984
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2952": {
      "op": "JUMPDEST"
    },
    "2953": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2955": {
      "op": "DUP1"
    },
    "2956": {
      "op": "MLOAD"
    },
    "2957": {
      "op": "DUP1"
    },
    "2958": {
      "op": "DUP3"
    },
    "2959": {
      "op": "ADD"
    },
    "2960": {
      "op": "SWAP1"
    },
    "2961": {
      "op": "SWAP2"
    },
    "2962": {
      "op": "MSTORE"
    },
    "2963": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2965": {
      "op": "DUP1"
    },
    "2966": {
      "op": "DUP3"
    },
    "2967": {
      "op": "MSTORE"
    },
    "2968": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2970": {
      "op": "DUP3"
    },
    "2971": {
      "op": "ADD"
    },
    "2972": {
      "op": "MSTORE"
    },
    "2973": {
      "op": "SWAP1"
    },
    "2974": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "b2c5fc2d45cdc1b21c43a5bdec407fc3b4538cc8",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"@chainlink/contracts/src/v0.6/LinkTokenReceiver.sol\";\nimport \"@chainlink/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol\";\nimport \"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\";\nimport \"@chainlink/contracts/src/v0.6/vendor/SafeMath.sol\";\n\n/**\n * @title The Chainlink Mock Oracle contract\n * @notice Chainlink smart contract developers can use this to test their contracts\n */\ncontract MockOracle is ChainlinkRequestInterface, LinkTokenReceiver {\n  using SafeMath for uint256;\n\n  uint256 constant public EXPIRY_TIME = 5 minutes;\n  uint256 constant private MINIMUM_CONSUMER_GAS_LIMIT = 400000;\n  \n  struct Request {\n      address callbackAddr;\n      bytes4 callbackFunctionId;\n  }\n\n  LinkTokenInterface internal LinkToken;\n  mapping(bytes32 => Request) private commitments;\n\n  event OracleRequest(\n    bytes32 indexed specId,\n    address requester,\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddr,\n    bytes4 callbackFunctionId,\n    uint256 cancelExpiration,\n    uint256 dataVersion,\n    bytes data\n  );\n\n  event CancelOracleRequest(\n    bytes32 indexed requestId\n  );\n\n  /**\n   * @notice Deploy with the address of the LINK token\n   * @dev Sets the LinkToken address for the imported LinkTokenInterface\n   * @param _link The address of the LINK token\n   */\n  constructor(address _link)\n    public\n  {\n    LinkToken = LinkTokenInterface(_link); // external but already deployed and unalterable\n  }\n\n  /**\n   * @notice Creates the Chainlink request\n   * @dev Stores the hash of the params as the on-chain commitment for the request.\n   * Emits OracleRequest event for the Chainlink node to detect.\n   * @param _sender The sender of the request\n   * @param _payment The amount of payment given (specified in wei)\n   * @param _specId The Job Specification ID\n   * @param _callbackAddress The callback address for the response\n   * @param _callbackFunctionId The callback function ID for the response\n   * @param _nonce The nonce sent by the requester\n   * @param _dataVersion The specified data version\n   * @param _data The CBOR payload of the request\n   */\n  function oracleRequest(\n    address _sender,\n    uint256 _payment,\n    bytes32 _specId,\n    address _callbackAddress,\n    bytes4 _callbackFunctionId,\n    uint256 _nonce,\n    uint256 _dataVersion,\n    bytes calldata _data\n  )\n    external\n    override\n    onlyLINK()\n    checkCallbackAddress(_callbackAddress)\n  {\n    bytes32 requestId = keccak256(abi.encodePacked(_sender, _nonce));\n    require(commitments[requestId].callbackAddr == address(0), \"Must use a unique ID\");\n    // solhint-disable-next-line not-rely-on-time\n    uint256 expiration = now.add(EXPIRY_TIME);\n\n    commitments[requestId] = Request(\n        _callbackAddress,\n        _callbackFunctionId\n    );\n\n    emit OracleRequest(\n      _specId,\n      _sender,\n      requestId,\n      _payment,\n      _callbackAddress,\n      _callbackFunctionId,\n      expiration,\n      _dataVersion,\n      _data);\n  }\n\n  /**\n   * @notice Called by the Chainlink node to fulfill requests\n   * @dev Given params must hash back to the commitment stored from `oracleRequest`.\n   * Will call the callback address' callback function without bubbling up error\n   * checking in a `require` so that the node can get paid.\n   * @param _requestId The fulfillment request ID that must match the requester's\n   * @param _data The data to return to the consuming contract\n   * @return Status if the external call was successful\n   */\n  function fulfillOracleRequest(\n    bytes32 _requestId,\n    bytes32 _data\n  )\n    external\n    isValidRequest(_requestId)\n    returns (bool)\n  {\n    Request memory req = commitments[_requestId];\n    delete commitments[_requestId];\n    require(gasleft() >= MINIMUM_CONSUMER_GAS_LIMIT, \"Must provide consumer enough gas\");\n    // All updates to the oracle's fulfillment should come before calling the\n    // callback(addr+functionId) as it is untrusted.\n    // See: https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern\n    (bool success, ) = req.callbackAddr.call(abi.encodeWithSelector(req.callbackFunctionId, _requestId, _data)); // solhint-disable-line avoid-low-level-calls\n    return success;\n  }\n\n  /**\n   * @notice Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK\n   * sent for the request back to the requester's address.\n   * @dev Given params must hash to a commitment stored on the contract in order for the request to be valid\n   * Emits CancelOracleRequest event.\n   * @param _requestId The request ID\n   * @param _payment The amount of payment given (specified in wei)\n   * @param _expiration The time of the expiration for the request\n   */\n  function cancelOracleRequest(\n    bytes32 _requestId,\n    uint256 _payment,\n    bytes4,\n    uint256 _expiration\n  )\n    external\n    override\n  {\n    require(commitments[_requestId].callbackAddr != address(0), \"Must use a unique ID\");\n    // solhint-disable-next-line not-rely-on-time\n    require(_expiration <= now, \"Request is not expired\");\n\n    delete commitments[_requestId];\n    emit CancelOracleRequest(_requestId);\n\n    assert(LinkToken.transfer(msg.sender, _payment));\n  }\n\n  /**\n   * @notice Returns the address of the LINK token\n   * @dev This is the public implementation for chainlinkTokenAddress, which is\n   * an internal method of the ChainlinkClient contract\n   */\n  function getChainlinkToken()\n    public\n    view\n    override\n    returns (address)\n  {\n    return address(LinkToken);\n  }\n\n  // MODIFIERS\n\n  /**\n   * @dev Reverts if request ID does not exist\n   * @param _requestId The given request ID to check in stored `commitments`\n   */\n  modifier isValidRequest(bytes32 _requestId) {\n    require(commitments[_requestId].callbackAddr != address(0), \"Must have a valid requestId\");\n    _;\n  }\n\n\n  /**\n   * @dev Reverts if the callback address is the LINK token\n   * @param _to The callback address\n   */\n  modifier checkCallbackAddress(address _to) {\n    require(_to != address(LinkToken), \"Cannot callback to LINK\");\n    _;\n  }\n\n}\n",
  "sourceMap": "472:5680:16:-:0;;;1375:137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1375:137:16;1421:9;:37;;-1:-1:-1;;;;;1421:37:16;;;-1:-1:-1;;;;;;1421:37:16;;;;;;;;;472:5680;;;;;;",
  "sourcePath": "contracts/test_contracts/mocks/MockOracle.sol",
  "type": "contract"
}